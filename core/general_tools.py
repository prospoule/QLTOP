# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QLtop
                                 A QGIS plugin
 Outil interactif de préanalyse pour le logiciel LTOP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HEIG-VD | Nicolas Szakacs
        email                : nicolas.szakacs@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; Version 3 of the License.               *
 *                                                                         *
 ***************************************************************************/
"""

import glob

from qgis.core import Qgis
from qgis.utils import iface

# filesystem paths normalization
from pathlib import Path


def gt_check_exist_file(file):
    """ Check if the file already exist, if yes add an increment """
    filename = Path(file).stem     # file name without extension
    extension = Path(file).suffix  # extension
    counter = 1
    while Path(file).is_file():
        file = filename + " (" + str(counter) + ")" + extension
        counter += 1
    return file


def gt_list_ltop_file(*arg):
    """ List all the Ltop configuration file in the working directory """
    files_grabbed = []
    for files in arg:
        files_grabbed.extend(glob.glob(files))
    return files_grabbed


def gt_splitter_ltop_format(line, column_separator):
    """
        Function to split each line according to the index separator attributes
        Works on Ltop.mes, Ltop.koo files
    """
    attribute_list = []
    for index in column_separator:
        token, line = line[:index], line[index:]
        token = token.strip()  ## remove whitespace in string
        attribute_list.append(token)
    return attribute_list


def gt_check_db_exist(db_name):
    """ Check if a db.qltop exist before importing .koo, .mes or .dat file """
    if not db_name:
        iface.messageBar().pushMessage("Attention : ",
                                       u"*** Aucun base de donnée sélectionnée, import échoué ***",
                                       level=Qgis.Warning,
                                       duration=3)
        return False
    else:
        return True


def gt_isfloat(value):
    """ Test if a string value can be converted to a float value """
    try:
        float(value)
        return True
    except:
        return False


class gtCreateFile:
    """
        Create a new Ltop file with only the format (and a title if provided)
        Input:
        - name of the futur file
        - the $$ format
        - a title if provided
        - the extension
        Output:
        - new ".koo", ".mes", ".dat" file
    """

    def __init__(self, file_name, title, format, extension, longueur):
        self.file_name = file_name
        self.title = title
        self.format = format  ## Max 4 characters
        self.extension = extension
        self.longueur = longueur
        self.tmp_name = self.file_name + self.extension
        if self.file_name:
            self.final_file_name = self.create_file()

    def create_file(self):
        """ Create a new empty txt file with an increment if already exist """
        with open(gt_check_exist_file(self.tmp_name), "w+") as out_file:
            if self.format:
                out_file.write(self.format)
            if self.title:
                title = self.title + (" " * (self.longueur - len(self.title))) + "\n"
                out_file.write(title)
            else:
                title = self.title + (" " * self.longueur) + "\n"
                out_file.write(title)
        iface.messageBar().pushMessage("Info : ",
                                       u"*** Création du fichier '{}' effectué ***".format(out_file.name),
                                       level=Qgis.Info,
                                       duration=2)
        return out_file.name
