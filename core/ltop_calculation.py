# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QLtop
                                 A QGIS plugin
 Outil interactif de prÃ©analyse pour le logiciel LTOP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HEIG-VD | Nicolas Szakacs
        email                : nicolas.szakacs@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; Version 3 of the License.               *
 *                                                                         *
 ***************************************************************************/
"""

from pathlib import Path  ## filesystem paths normalization
import os

from subprocess import Popen, PIPE  ## launch terminal command
from qgis.utils import iface
from qgis.core import Qgis


class launchLtop:
    """
    Purpose :
        - Launch an Ltop calculation.
    Input :
        - 3 mandatory files -> Ltop.dat, Ltop.mes and Ltop.koo/coo.
          These files are retrieved in the current working directory.
    Output :
        - Ltop.prnx file
    Note:
        - The Ltop process is launch through the windows terminal.
        - Check if the "LTPROG" environment variable exist.
          -> Is Ltop correctly installed ?
    """

    def __init__(self, file_dat, var_ltop):
        # Retrieve the Ltop path environment variable
        self.file_dat = file_dat  ## Ltop.dat File
        self.var_ltop = "LTPROG" if not var_ltop else var_ltop  ## Ltop Environment variable
        self.exe_ltop = self.check_environment_variable(self.var_ltop)
        self.log_ltop = self.run_ltop([str(self.exe_ltop), "-f", str(self.file_dat)])

    @staticmethod
    def check_environment_variable(var_env):
        """
        Check if the environemnt variable exist.
        If True -> define the Ltop.exe path.
        """
        env_ltop = os.environ.get(var_env)
        if env_ltop:
            # set the executable LTOP.exe path
            return Path(env_ltop) / "PROG" / "ltop.exe"

    @classmethod
    def run_ltop(cls, cmd):
        """ Launch the Ltop calculation through the terminal """
        try:
            pop = Popen(cmd,
                      stderr=PIPE,
                      stdout=PIPE,
                      shell=True,
                      universal_newlines=True)
            output, errors = pop.communicate()  ## wait the end of the execution, then display result
            if pop.returncode or errors:
                iface.messageBar().pushMessage(u"Erreur : ",
                                               u"*** Erreur au lancement du calcul Ltop : {}".format(errors),
                                               level=Qgis.Critical,
                                               duration=5)
            return cls.transform_list(output)
        except:
            print("Ltop calc. -> Failed to launch an Ltop calculation (def run_ltop)")

    @staticmethod
    def transform_list(ltop_log):
        """ Transform the Ltop output log in a list without empty spaces """
        try:
            split_list = ltop_log.splitlines()
            rmv_empty_space_list = list(map(str.rstrip, split_list))
            return rmv_empty_space_list
        except:
            print("Ltop calc. -> Transform the Ltop output log (def transform_list)")
