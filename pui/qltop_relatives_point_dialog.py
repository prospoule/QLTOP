# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QLtop
                                 A QGIS plugin
 Outil interactif de préanalyse pour le logiciel LTOP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HEIG-VD | Nicolas Szakacs
        email                : nicolas.szakacs@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; Version 3 of the License                *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtSql, QtCore, QtGui, QtWidgets
from qgis.PyQt.QtCore import Qt, QRegExp
from qgis.PyQt.QtWidgets import QDialog, QMenu

from qltop.core.database import *


plugin_folder = os.path.dirname(os.path.dirname(__file__))  # plugin path
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    plugin_folder, "ui", "qltop_relatives_point_dialog.ui"))


class datRelDialog(QDialog, FORM_CLASS):
    """
    """

    def __init__(self, db_name):
        QDialog.__init__(self)
        self.setupUi(self)
        self.setup_gui()
        self.db_name = db_name
        self.dat_ellips_table_display()
        self.dat_fiab_table_display()

    def setup_gui(self):
        # Activate the contextual menu in station tabel view
        self.tblDatEllips.customContextMenuRequested.connect(self.dat_ellips_table_menu)
        self.tblDatFiab.customContextMenuRequested.connect(self.dat_fiab_table_menu)

    def dat_ellips_table_display(self):
        """ Display the 'rel_ellips' table content in the table view """

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(self.db_name)

        # Definition of the model
        model = datRelEllipsModel()

        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()

        # Applying the model to the Qtableview
        self.tblDatEllips.setModel(model)

        # Define the minimum row height
        self.tblDatEllips.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name
        model.setHeaderData(2, Qt.Horizontal, u"Point 1")
        model.setHeaderData(4, Qt.Horizontal, u"Point 2")

        # Hide unwanted column
        list_hide_column = (0, 1, 3, 5)  ## id, ka, epoque 1, epoque 2
        for item in list_hide_column:
            self.tblDatEllips.hideColumn(item)

    def dat_fiab_table_display(self):
        """ Display the 'rel_ellips' table content in the table view """

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(self.db_name)

        # Definition of the model
        model = datRelFiabModel()

        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()

        # Applying the model to the Qtableview
        self.tblDatFiab.setModel(model)

        # Define the minimum row height
        self.tblDatFiab.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name
        model.setHeaderData(2, Qt.Horizontal, u"Point 1")
        model.setHeaderData(4, Qt.Horizontal, u"Point 2")

        # Hide unwanted column
        list_hide_column = (0, 1, 3, 5)  ## id, ka, epoque 1, epoque 2
        for item in list_hide_column:
            self.tblDatFiab.hideColumn(item)

    def dat_ellips_table_menu(self, position):
        """ Add a contextual menu to the 'rel_ellips' table view """
        # Create the menu
        menu = QMenu()

        # Menu options
        add_row = menu.addAction(u"Insérer une ligne vide")
        rmv_row = menu.addAction(u"Supprimer")
        sel_all = menu.addAction(u"Sélectionner toutes les lignes")

        action = menu.exec_(self.tblDatEllips.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            generalToolsDB.add_new_row(self.db_name, "rel_ellips")
            self.dat_ellips_table_display()
        if action == rmv_row:
            self.dat_ellips_rmv_table_row("rel_ellips", "id_ellip")
            self.dat_ellips_table_display()
        if action == sel_all:
            self.tblDatEllips.selectAll()

    def dat_fiab_table_menu(self, position):
        """ Add a contextual menu to the table 'rel_fiab' view """
        # Create the menu
        menu = QMenu()

        # Menu options
        add_row = menu.addAction(u"Insérer une ligne vide")
        rmv_row = menu.addAction(u"Supprimer")
        sel_all = menu.addAction(u"Sélectionner toutes les lignes")

        action = menu.exec_(self.tblDatFiab.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            generalToolsDB.add_new_row(self.db_name, "rel_fiab")
            self.dat_fiab_table_display()
        if action == rmv_row:
            self.dat_fiab_rmv_table_row("rel_fiab", "id_fiab")
            self.dat_fiab_table_display()
        if action == sel_all:
            self.tblDatFiab.selectAll()

    def dat_ellips_rmv_table_row(self, table_name, id_name):
        """ Delete selected rows in the ellipses relatives points table """      
        index = self.tblDatEllips.selectionModel().selectedRows()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id=item.sibling(item.row(), 0).data()  ## 0 = id in the table
                row_list.append([row_id])
            generalToolsDB.rmv_sel_row(self.db_name, table_name, id_name, row_list)

    def dat_fiab_rmv_table_row(self, table_name, id_name):
        """ Delete selected rows in the reliability relatives points table """      
        index = self.tblDatFiab.selectionModel().selectedRows()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id=item.sibling(item.row(), 0).data()  ## 0 = id in the table
                row_list.append([row_id])
            generalToolsDB.rmv_sel_row(self.db_name, table_name, id_name, row_list)


class datRelEllipsModel(QtSql.QSqlTableModel):
    """
        .DAT Tab -> 'rel_ellipse' table
        Subclass of model, used to modify the column formatting
    """
    def __init__(self, parent=None):
        QtSql.QSqlTableModel.__init__(self, parent=parent)
        self.setTable("rel_ellips")
        self.select()

    def data(self, index, role):
        """ Define the role applied to each column """
        val = QtSql.QSqlTableModel.data(self, index, role)
        if role == Qt.TextAlignmentRole:
                return Qt.AlignCenter | Qt.AlignVCenter
        return val


class datRelFiabModel(QtSql.QSqlTableModel):
    """
        .DAT Tab -> 'rel_fiab' table
        Subclass of model, used to modify the column formatting
    """
    def __init__(self, parent=None):
        QtSql.QSqlTableModel.__init__(self, parent=parent)
        self.setTable("rel_fiab")
        self.select()

    def data(self, index, role):
        """ Define the role applied to each column """
        val = QtSql.QSqlTableModel.data(self, index, role)
        if role == Qt.TextAlignmentRole:
                return Qt.AlignCenter | Qt.AlignVCenter
        return val
