# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QLtop
                                 A QGIS plugin
 Outil interactif de préanalyse pour le logiciel LTOP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HEIG-VD | Nicolas Szakacs
        email                : nicolas.szakacs@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; Version 3 of the License                *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtSql, QtCore, QtGui, QtWidgets
from qgis.PyQt.QtCore import Qt, QRegExp
from qgis.PyQt.QtWidgets import QDialog, QMenu

from qltop.core.database import *


plugin_folder = os.path.dirname(os.path.dirname(__file__))  # plugin path
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    plugin_folder, "ui", "qltop_group_dist_dir_azi_dialog.ui"))


class datGrpDialog(QDialog, FORM_CLASS):
    """
    Define the model for the distance, direction and azimuth to apply to the tables
    with the contextual menu
    """

    def __init__(self, db_name):
        QDialog.__init__(self)
        self.setupUi(self)
        self.setup_gui()
        self.db_name = db_name
        self.dat_grp_azi_display()
        self.dat_grp_dist_display()
        self.dat_grp_dir_display()

    def setup_gui(self):
        # Activate the contextual menu in station tabel view
        self.tblDatGrpDist.customContextMenuRequested.connect(self.dat_grp_dist_table_menu)
        self.tblDatGrpDir.customContextMenuRequested.connect(self.dat_grp_dir_table_menu)
        self.tblDatGrpAzi.customContextMenuRequested.connect(self.dat_grp_azi_table_menu)

    def dat_grp_azi_display(self):
        """ Display the 'grp_azimuth' table content in the table view """

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(self.db_name)

        # Definition of the model
        model = datGrpAziModel()

        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()

        # Applying the model to the Qtableview
        self.tblDatGrpAzi.setModel(model)

        # Define the minimum row height
        self.tblDatGrpAzi.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name and alignment
        model.setHeaderData(3, Qt.Horizontal, u"N° grp. gis/azi\n")
        model.setHeaderData(3, Qt.Horizontal, Qt.AlignCenter, Qt.TextAlignmentRole)
        model.setHeaderData(4, Qt.Horizontal, u"N° inc. orient.\n")
        model.setHeaderData(4, Qt.Horizontal, Qt.AlignCenter, Qt.TextAlignmentRole)
        model.setHeaderData(5, Qt.Horizontal, u"Err. moy. gis.\n[cc]")
        model.setHeaderData(5, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        # Hide unwanted column
        list_hide_column = (0, 1, 2)  ## id, ka, ka_name
        for item in list_hide_column:
            self.tblDatGrpAzi.hideColumn(item)

    def dat_grp_dist_display(self):
        """ Display the 'grp_distance' table content in the table view """

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(self.db_name)

        # Definition of the model
        model = datGrpDistModel()

        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()

        # Applying the model to the Qtableview
        self.tblDatGrpDist.setModel(model)

        # Define the minimum row height
        self.tblDatGrpDist.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name
        model.setHeaderData(3, Qt.Horizontal, u"N° grp. distances\n")
        model.setHeaderData(3, Qt.Horizontal, Qt.AlignCenter, Qt.TextAlignmentRole)
        model.setHeaderData(4, Qt.Horizontal, u"N° cst. add.\n")
        model.setHeaderData(4, Qt.Horizontal, Qt.AlignCenter, Qt.TextAlignmentRole)
        model.setHeaderData(5, Qt.Horizontal, u"N° corr. éch.\n")
        model.setHeaderData(5, Qt.Horizontal, Qt.AlignCenter, Qt.TextAlignmentRole)
        model.setHeaderData(6, Qt.Horizontal, u"Coeff. A\n[mm]")
        model.setHeaderData(6, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(7, Qt.Horizontal, u"Descr. instrument\n")
        model.setHeaderData(7, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(8, Qt.Horizontal, u"Coeff. B\n[mm/km]")
        model.setHeaderData(8, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(9, Qt.Horizontal, u"Coeff. C\n[mm/km²]")
        model.setHeaderData(9, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        # Hide unwanted column
        list_hide_column = (0, 1, 2)  ## id, ka, ka_name
        for item in list_hide_column:
            self.tblDatGrpDist.hideColumn(item)

    def dat_grp_dir_display(self):
        """ Display the 'grp_direction' table content in the table view """

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(self.db_name)

        # Definition of the model
        model = datGrpDirModel()

        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()

        # Applying the model to the Qtableview
        self.tblDatGrpDir.setModel(model)

        # Define the minimum row height
        self.tblDatGrpDir.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name and alignment
        model.setHeaderData(3, Qt.Horizontal, u"N° grp. directions\n")
        model.setHeaderData(3, Qt.Horizontal, Qt.AlignCenter, Qt.TextAlignmentRole)
        model.setHeaderData(4, Qt.Horizontal, u"Err. moy. dir.\n[cc]")
        model.setHeaderData(4, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        # Hide unwanted column
        list_hide_column = (0, 1, 2)  ## id, ka, ka_name
        for item in list_hide_column:
            self.tblDatGrpDir.hideColumn(item)

    def dat_grp_azi_table_menu(self, position):
        """ Add a contextual menu to the 'grp_azimuth' table view """
        # Create the menu
        menu = QMenu()

        # Menu options
        add_row = menu.addAction(u"Insérer une ligne vide")
        rmv_row = menu.addAction(u"Supprimer la ligne")
        sel_all = menu.addAction(u"Sélectionner toutes les lignes")

        action = menu.exec_(self.tblDatGrpAzi.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            generalToolsDB.add_new_row(self.db_name, "grp_azimuth")
            self.dat_grp_azi_display()
        if action == rmv_row:
            self.dat_grp_azi_rmv_table_row("grp_azimuth", "id_grpazi")
            self.dat_grp_azi_display()
        if action == sel_all:
            self.tblDatGrpAzi.selectAll()

    def dat_grp_dist_table_menu(self, position):
        """ Add a contextual menu to the 'grp_distance' table view """
        # Create the menu
        menu = QMenu()

        # Menu options
        add_row = menu.addAction(u"Insérer une ligne vide")
        rmv_row = menu.addAction(u"Supprimer la ligne")
        sel_all = menu.addAction(u"Sélectionner toutes les lignes")

        action = menu.exec_(self.tblDatGrpDist.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            generalToolsDB.add_new_row(self.db_name, "grp_distance")
            self.dat_grp_dist_display()
        if action == rmv_row:
            self.dat_grp_dist_rmv_table_row("grp_distance", "id_grpdis")
            self.dat_grp_dist_display()
        if action == sel_all:
            self.tblDatGrpDist.selectAll()

    def dat_grp_dir_table_menu(self, position):
        """ Add a contextual menu to the table 'grp_direction' view """
        # Create the menu
        menu = QMenu()

        # Menu options
        add_row = menu.addAction(u"Insérer une ligne vide")
        rmv_row = menu.addAction(u"Supprimer la ligne")
        sel_all = menu.addAction(u"Sélectionner toutes les lignes")

        action = menu.exec_(self.tblDatGrpDir.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            generalToolsDB.add_new_row(self.db_name, "grp_direction")
            self.dat_grp_dir_display()
        if action == rmv_row:
            self.dat_grp_dir_rmv_table_row("grp_direction", "id_grpdir")
            self.dat_grp_dir_display()
        if action == sel_all:
            self.tblDatGrpDir.selectAll()

    def dat_grp_azi_rmv_table_row(self, table_name, id_name):
        """ Delete selected rows in the distance group table """      
        index = self.tblDatGrpAzi.selectionModel().selectedIndexes()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id=item.sibling(item.row(), 0).data()  ## 0 = id in the table
                row_list.append([row_id])
            generalToolsDB.rmv_sel_row(self.db_name, table_name, id_name, row_list)

    def dat_grp_dist_rmv_table_row(self, table_name, id_name):
        """ Delete selected rows in the distance group table """      
        index = self.tblDatGrpDist.selectionModel().selectedIndexes()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id=item.sibling(item.row(), 0).data()  ## 0 = id in the table
                row_list.append([row_id])
            generalToolsDB.rmv_sel_row(self.db_name, table_name, id_name, row_list)

    def dat_grp_dir_rmv_table_row(self, table_name, id_name):
        """ Delete selected rows in the direction group table """      
        index = self.tblDatGrpDir.selectionModel().selectedIndexes()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id=item.sibling(item.row(), 0).data()  ## 0 = id in the table
                row_list.append([row_id])
            generalToolsDB.rmv_sel_row(self.db_name, table_name, id_name, row_list)


class datGrpAziModel(QtSql.QSqlTableModel):
    """
        .DAT Tab -> 'grp_azimuth' table
        Subclass of model, used to modify the column formatting
    """

    def __init__(self, parent=None):
        QtSql.QSqlTableModel.__init__(self, parent=parent)
        self.setTable("grp_azimuth")
        self.select()

    def data(self, index, role):
        """ Define the role applied to each column """
        val = QtSql.QSqlTableModel.data(self, index, role)
        if role == Qt.TextAlignmentRole:
            if index.column() == 3 or index.column() == 4:  ## 'N° group' + 'inc. ori.' attribut
                return Qt.AlignCenter | Qt.AlignVCenter
            else:
                return Qt.AlignRight | Qt.AlignVCenter   ## Default alignment
        if role == Qt.BackgroundRole:
            if index.column() == 3:  ## 'N° group' attribut
                return QtGui.QColor(180, 210, 230)
            elif index.column() == 4:  ## 'inc. ori.' attribut
                return QtGui.QColor(165, 195, 215)
            else:
                return QtGui.QColor(200, 230, 250)  ## Default background color
        return val


class datGrpDistModel(QtSql.QSqlTableModel):
    """
        .DAT Tab -> 'grp_distance' table
        Subclass of model, used to modify the column formatting
    """

    def __init__(self, parent=None):
        QtSql.QSqlTableModel.__init__(self, parent=parent)
        self.setTable("grp_distance")
        self.select()

    def data(self, index, role):
        """ Define the role applied to each column """
        val = QtSql.QSqlTableModel.data(self, index, role)
        if role == Qt.TextAlignmentRole:
            if index.column() == 3 or index.column() == 4 \
            or index.column() == 5:  ## 'N° grp., N° cst. add, N° cst. éch.' attribut
                return Qt.AlignCenter | Qt.AlignVCenter
            elif index.column() == 7:  ## 'Description' attribut
                return Qt.AlignLeft | Qt.AlignVCenter
            else:
                return Qt.AlignRight | Qt.AlignVCenter   ## Default alignment
        if role == Qt.BackgroundRole:
            if index.column() == 3:  ## 'N° group' attribut
                return QtGui.QColor(205, 230, 205)
            elif index.column() == 4 or index.column() == 5:
                return QtGui.QColor(180, 200, 180)
            elif index.column() == 7:
                return QtGui.QColor(240, 255, 240)
            else:
                return QtGui.QColor(225, 255, 225)  ## Default background color
        return val


class datGrpDirModel(QtSql.QSqlTableModel):
    """
        .DAT Tab -> 'grp_direction' table
        Subclass of model, used to modify the column formatting
    """

    def __init__(self, parent=None):
        QtSql.QSqlTableModel.__init__(self, parent=parent)
        self.setTable("grp_direction")
        self.select()

    def data(self, index, role):
        """ Define the role applied to each column """
        val = QtSql.QSqlTableModel.data(self, index, role)
        if role == Qt.TextAlignmentRole:
            if index.column() == 3:  ## 'N° group' attribut
                return Qt.AlignCenter | Qt.AlignVCenter
            else:
                return Qt.AlignRight | Qt.AlignVCenter   ## Default alignment
        if role == Qt.BackgroundRole:
            if index.column() == 3:  ## 'N° group' attribut
                return QtGui.QColor(180, 210, 230)
            else:
                return QtGui.QColor(200, 230, 250)  ## Default background color
        return val






