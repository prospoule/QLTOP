# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QLtop
                                 A QGIS plugin
 Outil interactif de préanalyse pour le logiciel LTOP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HEIG-VD | Nicolas Szakacs
        email                : nicolas.szakacs@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; Version 3 of the License                *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtSql, QtCore, QtGui, QtWidgets
from qgis.PyQt.QtCore import Qt, QRegExp
from qgis.PyQt.QtWidgets import QDialog, QMenu

from qltop.core.database import *


plugin_folder = os.path.dirname(os.path.dirname(__file__))  # plugin path
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    plugin_folder, "ui", "qltop_dat_fixed_points_dialog.ui"))


class datPfDialog(QDialog, FORM_CLASS):
    """
    Define the model for the fixe/variable point table
    with the contextual menu
    """

    def __init__(self, db_name):
        QDialog.__init__(self)
        self.setupUi(self)
        self.setup_gui()
        self.db_name = db_name
        self.dat_pf_table_display()

    def setup_gui(self):
        # Other widgets actions
        self.btnDatSetPFP.clicked.connect(lambda: self.dat_PF_set(u"pfp", 0))
        self.btnDatSetPFA.clicked.connect(lambda: self.dat_PF_set(u"pfa", 0))
        self.btnDatRmvPFP.clicked.connect(lambda: self.dat_PF_set(u"pfp", 1))
        self.btnDatRmvPFA.clicked.connect(lambda: self.dat_PF_set(u"pfa", 1))
        self.btnDatSelAll.clicked.connect(lambda: self.tblDatPF.selectAll())
        # Activate the contextual menu in station tabel view
        self.tblDatPF.customContextMenuRequested.connect(self.dat_PF_table_menu)

    def dat_pf_table_display(self):
        """ Display the 'point_pk' table content in the table view """

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(self.db_name)

        # Definition of the model
        model = datPFModel()

        # Definition of the proxy model for the filter feature
        source_model = model
        proxy_model = QtCore.QSortFilterProxyModel(source_model)
        proxy_model.setSourceModel(source_model)

        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()
        # Applying the model to the Qtableview
        self.tblDatPF.setModel(proxy_model)

        # Define the minimum row height
        self.tblDatPF.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name
        model.setHeaderData(1, Qt.Horizontal, u"Nom")
        model.setHeaderData(2, Qt.Horizontal, u"Planimétrique")
        model.setHeaderData(3, Qt.Horizontal, u"Altimétrique")

        # Ajust the column width
        header = self.tblDatPF.horizontalHeader()
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)

        # Hide unwanted column
        list_hide_column = (0, 4)  ## id + filter
        for item in list_hide_column:
            self.tblDatPF.hideColumn(item)

        proxy_model.setFilterRegExp(QRegExp(self.txtDatSearch.text(), Qt.CaseInsensitive, QRegExp.RegExp))

        # search all columns
        proxy_model.setFilterKeyColumn(4)  ## Search on the filter column defined in the view
        
        # Triggers to apply the filter
        self.txtDatSearch.textChanged.connect(self.txtDatSearch.update)
        self.txtDatSearch.textChanged.connect(proxy_model.setFilterRegExp)

    def dat_PF_table_menu(self, position):
        """ Add a contextual menu to the fixed points table view """
        # Create the menu
        menu = QMenu()
        # Menu options
        set_pfp = menu.addAction(u"Fixe en planimétrie")
        set_pfa = menu.addAction(u"Fixe en altimétrie")
        rmv_pfp = menu.addAction(u"Variable en planimétrie")
        rmv_pfa = menu.addAction(u"Variable en altimétrie")
        menu.addSeparator()
        sel_all = menu.addAction(u"Sélectionner toutes les lignes")
        action = menu.exec_(self.tblDatPF.mapToGlobal(position))
        # Define the menu actions
        if action == set_pfp:
            self.dat_PF_set(u"pfp", 0)
        if action == set_pfa:
            self.dat_PF_set(u"pfa", 0)
        if action == rmv_pfp:
            self.dat_PF_set(u"pfp", 1)
        if action == rmv_pfa:
            self.dat_PF_set(u"pfa", 1)
        if action == sel_all:
            self.tblDatPF.selectAll()

    def dat_PF_set(self, field_name, bool_value):
        """ Define the state value to the selected rows """
        index = self.tblDatPF.selectionModel().selectedRows()  ## index of selected rows
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id=item.sibling(item.row(), 0).data()  ## 0 = id in the point_pk table
                row_list.append([row_id])
            managePointsDB.change_point_fixe(self.db_name, field_name, bool_value, row_list)
        self.dat_pf_table_display()  ## Update the DB pf content in the Qtableview in the dialog


class datPFModel(QtSql.QSqlTableModel):
    """
        .MES Tab -> 'point_pk' table
        Subclass of model, used to modify the column formatting
        https://issue.life/questions/45343715
    """
    def __init__(self, parent=None):
        QtSql.QSqlTableModel.__init__(self, parent=parent)
        self.setTable("fixed_point_view")
        self.select()

    def data(self, index, role):
        """ Define the role applied to each column """
        val = QtSql.QSqlTableModel.data(self, index, role)
        if role == Qt.TextAlignmentRole:
                return Qt.AlignCenter | Qt.AlignVCenter
        if role == Qt.DisplayRole:
            if index.column() == 2 or index.column() == 3:
                if val < 1:
                    return "Fixe"
                return "Variable"
        return val


