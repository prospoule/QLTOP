# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QLtop
                                 A QGIS plugin
 Outil interactif de pr√©analyse pour le logiciel LTOP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HEIG-VD | Nicolas Szakacs
        email                : nicolas.szakacs@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; Version 3 of the License                *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtCore, QtSql, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtGui import QIntValidator, QDoubleValidator
from qgis.PyQt.QtWidgets import QFileDialog, QMenu, QApplication

# Import the mandatory modules
import datetime
import webbrowser
from pathlib import Path  ## filesystem paths normalization
from qgis.utils import iface
from qgis.core import Qgis, QgsCoordinateReferenceSystem, QgsMapLayerProxyModel,\
                      QgsPointXY

# Import the core program
from qltop.core.ltop_calculation import *
from qltop.core.point_management import *
from qltop.core.mes_management import *
from qltop.core.dat_management import *
from qltop.core.database import *
from qltop.core.visibility_analysis import *
from qltop.core.result import *

# Delete rows confirmation dialog box
from qltop.pui.qltop_point_delete_confirmation_dialog import *
from qltop.pui.qltop_station_delete_confirmation_dialog import *
from qltop.pui.qltop_mesure_delete_confirmation_dialog import *

plugin_folder = os.path.dirname(os.path.dirname(__file__))  # plugin path
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    plugin_folder, 'ui', 'qltop_dockwidget_base.ui'))


class QLtopDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    # Red / light red color
    stylesSheetFalse = \
        """
    QCommandLinkButton
    {
    background-color: #FF3333;
    border-radius: 3px;
    color: #fff;
    }
    QCommandLinkButton::hover
    {
    background-color: #FF6666;
    }
    QCommandLinkButton::pressed
    {
    background-color: #FF3333;
    }
    """

    # Green / light Green color
    stylesSheetTrue = \
        """
    QCommandLinkButton
    {
    background-color: #47d147;
    border-radius: 3px;
    color: #fff;
    }
    QCommandLinkButton::hover
    {
    background-color: #66FF66;
    }
    QCommandLinkButton::pressed
    {
    background-color: #47d147;
    }
    """

    def __init__(self, parent=None):
        """Constructor."""
        super(QLtopDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.setup_gui()
        self.tool_on_raster_changed()  ## init value

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    ################################################################################################
    ################################# DEBUT DU PROGRAMME ###########################################
    ################################################################################################

    def setup_gui(self):
        """ Definition of widgets action """

        # ###############################################################################################
        # FOOTER PART (CONSOLE)
        # ###############################################################################################
        # The triggers
        self.btnHelp.clicked.connect(lambda: webbrowser.open("https://github.com/prospoule/QLTOP/wiki"))  ## Action of the help button
        self.btnConsoleClear.clicked.connect(self.txtConsole.clear)  ## Action of the clear button
        self.btnConsoleExport.clicked.connect(self.export_console)   ## Action of the export console button

        # ###############################################################################################
        # CONFIGURATION TAB
        # ###############################################################################################
        # Populate the projection system by default = Qgis project
        self.conf_set_project_epsg()
        # The triggers
        self.txtNewDB.returnPressed.connect(self.create_new_db)
        self.txtNewDB.textChanged.connect(self.qltop_file_create_trigger)
        self.btnReloadFileDB.clicked.connect(self.db_file_reload)
        self.btnWorkDirectory.clicked.connect(self.select_working_directory)          ## Select the working directory
        self.pathWorkDirectory.textChanged.connect(self.trigger_qltop_file)
        self.btnCreateNewDB.clicked.connect(self.create_new_db)                       ## Create a new empty database with scheme
        self.btnLoadFileDB.clicked.connect(self.load_db_file)                         ## Load the database in the ui plugin
        # Deactivate some controls
        self.btnCreateNewDB.setEnabled(False)
        self.widGestionBD.setEnabled(False)

        # ###############################################################################################
        # .KOO TAB
        # ###############################################################################################
        # Deactivate some controls
        self.btnPointCreateKoo.setEnabled(False)
        # Add the colored stylesheet to the commandlinkbutton
        self.btnPointDisplay.setStyleSheet(self.stylesSheetFalse)
        self.btnPointUpdateKoo.setStyleSheet(self.stylesSheetFalse)
        # The triggers
        self.btnPointLoadKoo.clicked.connect(self.load_koo_file)                    ## Load and existing Ltop.koo file in the database
        self.btnPointDisplay.clicked.connect(self.qgis_display_points)              ## Display the points in the Qgis canvas
        self.btnPointReloadKoo.clicked.connect(self.koo_file_reload)                ## Trigger the reload files (.koo)
        self.txtNameKoo.returnPressed.connect(self.koo_file_create)                 ## Create an new empty Ltop.koo file
        self.txtNameKoo.textChanged.connect(self.koo_file_create_trigger)           ## Enable the create Ltop.koo file button
        self.btnPointCreateKoo.clicked.connect(self.koo_file_create)                ## Create an new empty Ltop.koo file
        self.btnPointUpdateKoo.clicked.connect(self.koo_file_update)                ## Update the selected Ltop.koo file with the database content
        self.cbbPointListKoo.currentTextChanged.connect(self.dat_maj_IF_KOO_param)  ## Update .DAT panel value
        # Activate the contextual menu in point tabel view
        self.tblPoint.customContextMenuRequested.connect(self.db_point_table_menu)

        # ###############################################################################################
        # .MES TAB
        # ###############################################################################################
        # Deactivate some controls
        self.btnMesCreateMes.setEnabled(False)
        # Add the colored stylesheet to the commandlinkbutton
        self.btnMesDisplay.setStyleSheet(self.stylesSheetFalse)
        self.btnMesUpdateMes.setStyleSheet(self.stylesSheetFalse)
        # The triggers
        self.btnLoadFileMes.clicked.connect(self.load_mes_file)                    ## Load and existing Ltop.mes file in the database
        self.btnMesDisplay.clicked.connect(self.qgis_display_mesures)              ## Display the measurments in the Qgis canvas
        self.btnReloadFileMes.clicked.connect(self.mes_file_reload)                ## Trigger the reload files (.mes)
        self.txtNameMes.returnPressed.connect(self.mes_file_create)                ## Create an new empty Ltop.mes file
        self.txtNameMes.textChanged.connect(self.mes_file_create_trigger)          ## Enable the create Ltop.mes file button
        self.btnMesCreateMes.clicked.connect(self.mes_file_create)                 ## Create an new empty Ltop.mes file
        self.btnMesUpdateMes.clicked.connect(self.mes_file_update)                 ## Update the selected Ltop.mes file with the database content
        self.cbbListFileMes.currentTextChanged.connect(self.dat_maj_IF_MES_param)  ## Update .DAT panel value
        # Activate the contextual menu
        self.tblMesStation.customContextMenuRequested.connect(self.mes_station_table_menu)
        self.tblMesMesure.customContextMenuRequested.connect(self.mes_mesure_table_menu)

        # ###############################################################################################
        # .DAT TAB
        # ###############################################################################################
        # Deactivate some controls
        self.btnDatCreateDat.setEnabled(False)
        # Add the colored stylesheet to the commandlinkbutton
        self.btnDatUpdateDat.setStyleSheet(self.stylesSheetFalse)
        self.btnDatLaunchLtop.setStyleSheet(self.stylesSheetFalse)
        self.btnDatPF.setStyleSheet(stylesSheetDat)
        self.btnDatRel.setStyleSheet(stylesSheetDat)
        self.btnDatGrp.setStyleSheet(stylesSheetDat)

        # The triggers
        self.btnReloadFileDat.clicked.connect(self.dat_file_reload)           ## Trigger the reload files (.dat)
        self.btnLoadFileDat.clicked.connect(self.load_dat_file)               ## Load an Ltop.DAT file in the database
        self.txtNameDat.returnPressed.connect(self.dat_file_create)           ## Create an new empty Ltop.dat file
        self.txtNameDat.textChanged.connect(self.dat_file_create_trigger)     ## Enable the create Ltop.dat file button
        self.btnDatCreateDat.clicked.connect(self.dat_file_create)            ## Create an new empty Ltop.dat file
        self.btnDatPF.clicked.connect(self.dat_open_fixed_point_dialog)       ## Open the new/fixed points dialogbox
        self.btnDatRel.clicked.connect(self.dat_open_relatives_point_dialog)  ## Open the reliability point dialogbox
        self.btnDatGrp.clicked.connect(self.dat_open_dist_dir_grp_dialog)     ## Open direction/distance group dialogbox
        self.btnDatLaunchLtop.clicked.connect(self.dat_ltop_start)            ## Launch an Ltop calculation
        self.btnDatUpdateDat.clicked.connect(self.dat_file_update)            ## Update the selected Ltop.dat file with the database content

        # The DAT table triggers
        self.txtDat_IF_KOO.textChanged.connect(lambda: self.dat_update_db("param1", self.txtDat_IF_KOO.text(), "IF", ""))
        self.txtDat_IF_MES.textChanged.connect(lambda: self.dat_update_db("param2", self.txtDat_IF_MES.text(), "IF", ""))

        self.txtDAT_OF_PRN.editingFinished.connect(lambda: self.dat_update_db("param1", self.txtDAT_OF_PRN.text(), "OF", ""))
        self.txtDAT_OF_RES.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_OF_RES.text(), "OF", ""))
        self.txtDAT_OF_IPL.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_OF_IPL.text(), "OF", ""))
        self.txtDAT_00_Titre1.editingFinished.connect(lambda: self.dat_update_db("param1", self.txtDAT_00_Titre1.text(), "00", ""))
        self.txtDAT_00_Titre2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_00_Titre2.text(), "00", ""))

        self.cbbDAT_01_KOORD_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_01_KOORD_P2.currentText(), "01", "KOORD"))
        self.txtDAT_01_KOORD_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_01_KOORD_P3.text(), "01", "KOORD"))
        self.txtDAT_01_KOORD_P4.editingFinished.connect(lambda: self.dat_update_db("param4", self.txtDAT_01_KOORD_P4.text(), "01", "KOORD"))
        self.txtDAT_01_KOORD_P5.editingFinished.connect(lambda: self.dat_update_db("param5", self.txtDAT_01_KOORD_P5.text(), "01", "KOORD"))
        self.txtDAT_01_KOORD_P6.editingFinished.connect(lambda: self.dat_update_db("param6", self.txtDAT_01_KOORD_P6.text(), "01", "KOORD"))
        self.txtDAT_01_KOORD_P7.editingFinished.connect(lambda: self.dat_update_db("param7", self.txtDAT_01_KOORD_P7.text(), "01", "KOORD"))
        self.txtDAT_01_KOORD_P8.editingFinished.connect(lambda: self.dat_update_db("param8", self.txtDAT_01_KOORD_P8.text(), "01", "KOORD"))

        self.cbbDAT_01_RUNDUNG_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_01_RUNDUNG_P2.currentText(), "01", "RUNDUNG"))
        self.txtDAT_01_RUNDUNG_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_01_RUNDUNG_P3.text(), "01", "RUNDUNG"))
        self.cbbDAT_01_KAT_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_01_KAT_P2.currentText(), "01", "KAT"))
        self.cbbDAT_01_KAT_P3.currentTextChanged.connect(lambda: self.dat_update_db("param3", self.cbbDAT_01_KAT_P3.currentText(), "01", "KAT"))

        self.txtDAT_02_LAGEITER_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_02_LAGEITER_P2.text(), "02", "LAGEITER"))
        self.txtDAT_03_HOEHEITE_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_03_HOEHEITE_P2.text(), "03", "HOEHEITE"))
        self.txtDAT_04_LAGEABB_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_04_LAGEABB_P2.text(), "04", "LAGE ABB"))
        self.txtDAT_05_HOEHEABB_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_05_HOEHEABB_P2.text(), "05", "HOEHEABB"))

        self.txtDAT_07_MFRIAZ_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_07_MFRIAZ_P2.text(), "07", "MF RI+AZ"))
        self.txtDAT_07_MFRIAZ_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_07_MFRIAZ_P3.text(), "07", "MF RI+AZ"))

        self.txtDAT_08_DISTRED_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_08_DISTRED_P2.text(), "08", "DIST.RED"))
        self.txtDAT_08_DISTRED_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_08_DISTRED_P3.text(), "08", "DIST.RED"))
        self.txtDAT_08_DISTRED_P4.editingFinished.connect(lambda: self.dat_update_db("param4", self.txtDAT_08_DISTRED_P4.text(), "08", "DIST.RED"))
        self.txtDAT_08_DISTRED_P5.editingFinished.connect(lambda: self.dat_update_db("param5", self.txtDAT_08_DISTRED_P5.text(), "08", "DIST.RED"))
        self.txtDAT_08_DISTRED_P6.editingFinished.connect(lambda: self.dat_update_db("param6", self.txtDAT_08_DISTRED_P6.text(), "08", "DIST.RED"))

        self.txtDAT_09_MFHDIS_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_09_MFHDIS_P2.text(), "09", "MF H.DIS"))
        self.txtDAT_09_MFHDIS_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_09_MFHDIS_P3.text(), "09", "MF H.DIS"))

        self.txtDAT_10_MFHW_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_10_MFHW_P2.text(), "10", "MF HW"))

        self.txtDAT_11_MFIHSH_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_11_MFIHSH_P2.text(), "11", "MF IH-SH"))
        self.txtDAT_11_MFIHSH_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_11_MFIHSH_P3.text(), "11", "MF IH-SH"))

        self.txtDAT_12_REFR_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_12_REFR_P2.text(), "12", "REFRAKT."))
        self.txtDAT_12_REFR_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_12_REFR_P3.text(), "12", "REFRAKT."))

        self.txtDAT_13_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_13_P2.text(), "13", ""))
        self.txtDAT_13_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_13_P3.text(), "13", ""))
        self.cbbDAT_13_P4.currentTextChanged.connect(lambda: self.dat_update_db("param4", self.cbbDAT_13_P4.currentText(), "13", ""))

        self.cbbDAT_14_KOOVERZ_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_14_KOOVERZ_P2.currentText(), "14", "KOO.VERZ"))
        self.cbbDAT_14_KOOVERZ_P3.currentTextChanged.connect(lambda: self.dat_update_db("param3", self.cbbDAT_14_KOOVERZ_P3.currentText(), "14", "KOO.VERZ"))
        self.cbbDAT_14_KOOVERZ_P4.currentTextChanged.connect(lambda: self.dat_update_db("param4", self.cbbDAT_14_KOOVERZ_P4.currentText(), "14", "KOO.VERZ"))
        self.txtDAT_14_KOOVERZ_P5.editingFinished.connect(lambda: self.dat_update_db("param5", self.txtDAT_14_KOOVERZ_P5.text(), "14", "KOO.VERZ"))
        self.cbbDAT_14_KOOVERZ_P6.currentTextChanged.connect(lambda: self.dat_update_db("param6", self.cbbDAT_14_KOOVERZ_P6.currentText(), "14", "KOO.VERZ"))
        self.cbbDAT_14_KOOVERZ_P7.currentTextChanged.connect(lambda: self.dat_update_db("param7", self.cbbDAT_14_KOOVERZ_P7.currentText(), "14", "KOO.VERZ"))

        self.cbbDAT_14_PLOT_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_14_PLOT_P2.currentText(), "14", "PLOT"))
        self.txtDAT_14_PLOT_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_14_PLOT_P3.text(), "14", "PLOT"))
        self.txtDAT_14_PLOT_P4.editingFinished.connect(lambda: self.dat_update_db("param4", self.txtDAT_14_PLOT_P4.text(), "14", "PLOT"))
        self.cbbDAT_14_PLOT_P5.currentTextChanged.connect(lambda: self.dat_update_db("param5", self.cbbDAT_14_PLOT_P5.currentText(), "14", "PLOT"))
        self.txtDAT_14_PLOT_P6.editingFinished.connect(lambda: self.dat_update_db("param6", self.txtDAT_14_PLOT_P6.text(), "14", "PLOT"))
        self.txtDAT_14_PLOT_P7.editingFinished.connect(lambda: self.dat_update_db("param7", self.txtDAT_14_PLOT_P7.text(), "14", "PLOT"))
        self.txtDAT_14_PLOT_P8.editingFinished.connect(lambda: self.dat_update_db("param8", self.txtDAT_14_PLOT_P8.text(), "14", "PLOT"))

        self.cbbDAT_15_MATRIZ_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_15_MATRIZ_P2.currentText(), "15", "MATRIZEN"))
        self.cbbDAT_15_MATRIZ_P3.currentTextChanged.connect(lambda: self.dat_update_db("param3", self.cbbDAT_15_MATRIZ_P3.currentText(), "15", "MATRIZEN"))

        self.cbbDAT_16_PRAEANA_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_16_PRAEANA_P2.currentText(), "16", "PRAEANA."))

        self.cbbDAT_17_PROGVERS_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_17_PROGVERS_P2.currentText(), "17", "PROGVERS"))
        self.cbbDAT_17_PROGVERS_P3.currentTextChanged.connect(lambda: self.dat_update_db("param3", self.cbbDAT_17_PROGVERS_P3.currentText(), "17", "PROGVERS"))
        self.cbbDAT_17_PROGVERS_P4.currentTextChanged.connect(lambda: self.dat_update_db("param4", self.cbbDAT_17_PROGVERS_P4.currentText(), "17", "PROGVERS"))
        self.txtDAT_17_PROGVERS_P5.editingFinished.connect(lambda: self.dat_update_db("param5", self.txtDAT_17_PROGVERS_P5.text(), "17", "PROGVERS"))

        self.cbbDAT_17_ELLIPS_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_17_ELLIPS_P2.currentText(), "17", "ELLIPSOI"))
        self.txtDAT_17_ELLIPS_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_17_ELLIPS_P3.text(), "17", "ELLIPSOI"))
        self.txtDAT_17_ELLIPS_P4.editingFinished.connect(lambda: self.dat_update_db("param4", self.txtDAT_17_ELLIPS_P4.text(), "17", "ELLIPSOI"))
        self.txtDAT_17_ELLIPS_P5.editingFinished.connect(lambda: self.dat_update_db("param5", self.txtDAT_17_ELLIPS_P5.text(), "17", "ELLIPSOI"))

        self.txtDAT_17_ROBUST_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_17_ROBUST_P2.text(), "17", "ROBUST"))
        self.txtDAT_17_ROBUST_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_17_ROBUST_P3.text(), "17", "ROBUST"))

        self.txtDAT_18_IZUVER_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_18_IZUVER_P2.text(), "18", "I.ZUVERL"))
        self.txtDAT_18_IZUVER_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_18_IZUVER_P3.text(), "18", "I.ZUVERL"))
        self.txtDAT_18_IZUVER_P4.editingFinished.connect(lambda: self.dat_update_db("param4", self.txtDAT_18_IZUVER_P4.text(), "18", "I.ZUVERL"))
        self.txtDAT_18_IZUVER_P5.editingFinished.connect(lambda: self.dat_update_db("param5", self.txtDAT_18_IZUVER_P5.text(), "18", "I.ZUVERL"))
        self.txtDAT_18_IZUVER_P6.editingFinished.connect(lambda: self.dat_update_db("param6", self.txtDAT_18_IZUVER_P6.text(), "18", "I.ZUVERL"))

        self.cbbDAT_18_FIAB_P2.currentTextChanged.connect(lambda: self.dat_update_db("param2", self.cbbDAT_18_FIAB_P2.currentText(), "18", "FIAB"))
        self.txtDAT_18_FIAB_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_18_FIAB_P3.text(), "18", "FIAB"))

        self.txtDAT_20_P1.editingFinished.connect(lambda: self.dat_update_db("param1", self.txtDAT_20_P1.text(), "20", ""))
        self.txtDAT_20_P2.editingFinished.connect(lambda: self.dat_update_db("param2", self.txtDAT_20_P2.text(), "20", ""))
        self.txtDAT_20_P3.editingFinished.connect(lambda: self.dat_update_db("param3", self.txtDAT_20_P3.text(), "20", ""))
        self.txtDAT_20_P4.editingFinished.connect(lambda: self.dat_update_db("param4", self.txtDAT_20_P4.text(), "20", ""))

        # ###############################################################################################
        # RESULT TAB
        # ###############################################################################################
        # Add the colored stylesheet to the commandlinkbutton
        self.btnResDisplayPrnx.setStyleSheet(self.stylesSheetFalse)
        # The triggers
        self.btnLoadFilePrnx.clicked.connect(self.load_prnx_file_to_tab)       ## Load and existing Ltop.prnx file in the result tab
        self.btnResDisplayPrnx.clicked.connect(self.load_prnx_file_to_qgis)    ## Load and existing Ltop.prnx file to the Qgis canevas
        self.btnReloadFilePrnx.clicked.connect(self.prnx_file_reload)          ## Trigger the reload files (.prnx)
        # Restriction of input values to integer
        self.txtResDisplayScale.setValidator(QDoubleValidator(0, 1000000, 7))  ## min/max/decimal value allowed

        # ###############################################################################################
        # TOOLS TAB
        # ###############################################################################################
        # S√©lection d'un fichier raster
        self.cbbToolSelRaster.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.cbbToolSelRaster.setShowCrs(True)
        # Add the colored stylesheet to the commandlinkbutton
        self.btnToolCalcVisibility.setStyleSheet(self.stylesSheetFalse)
        # Restriction of input values to integer
        self.txtToolSetSecur.setValidator(QIntValidator())               ## can be either be negativ or positiv
        self.txtToolSetDiscr.setValidator(QIntValidator(1, 9999, self))  ## min/max value allowed
        # Set the first raster layer to the band selection widget
        self.cbbToolSelBand.setLayer(self.cbbToolSelRaster.currentLayer())        ## init only
        # The triggers
        self.btnToolCalcVisibility.clicked.connect(self.tool_launch_calc_visibility)
        self.cbbToolSelRaster.layerChanged.connect(self.cbbToolSelBand.setLayer)  ## on layer change
        self.cbbToolSelRaster.layerChanged.connect(self.tool_on_raster_changed)

    ################################################################################################
    ##################################### CONFIGURATION PANEL ######################################
    ################################################################################################

    def export_console(self):
        """ Export the console content to a log file """
        working_dir = self.pathWorkDirectory.text()  # current directory path
        content = self.txtConsole.toPlainText()      # Console content
        if working_dir:
            with open("test_log.log", "a+") as out_file:
                out_file.write(content + "\n")
            iface.messageBar().pushMessage("Info : ",
                                           u"*** Export de la console effectu√© ***",
                                           level=Qgis.Info,
                                           duration=2
                                           )
        else:
            iface.messageBar().pushMessage("Info : ",
                                           u"*** Aucun dossier en sortie s√©lectionn√© ***",
                                           level=Qgis.Warning,
                                           duration=3
                                           )

    def select_working_directory(self):
        """ Open a dialog box to select the current working directory """
        title = "Dossier de travail"
        working_dir = QFileDialog.getExistingDirectory(None, title)
        self.pathWorkDirectory.setText(working_dir)

    def trigger_qltop_file(self):
        """ Populate the plugin if a working directory is selected """
        working_dir = self.pathWorkDirectory.text()
        self.res_erase_all_table_widget()  ## Erase the Ltop.prnx content in the 'Result' panel
        if working_dir:
            # Define the working directory
            os.chdir(Path(working_dir))
            # Get the lists of the files (.qltop, .koo, .mes, .dat)
            self.db_file_reload()
            self.koo_file_reload()
            self.mes_file_reload()
            self.dat_file_reload()
            self.prnx_file_reload()
            # Activate the ability to manage the files (.qltop, .koo)
            self.tab_koo.setEnabled(True)
            self.tab_mes.setEnabled(True)
            self.tab_dat.setEnabled(True)
            self.tab_result.setEnabled(True)
            self.tab_tools.setEnabled(True)
            self.widGestionBD.setEnabled(True)
        else:
            db_name = self.cbbListFileDB.currentText()          # Current database.qltop name
            # Empty the lists (.qltop, .koo, .mes, .dat, .prnx)
            self.cbbListFileDB.clear()
            self.cbbPointListKoo.clear()
            self.cbbListFileMes.clear()
            self.cbbListFileDat.clear()
            self.cbbListFilePrnx.clear()
            # Deactivate the ability to manage the files (.qltop, .koo)
            self.tab_koo.setEnabled(False)
            self.tab_mes.setEnabled(False)
            self.tab_dat.setEnabled(False)
            self.tab_result.setEnabled(False)
            self.tab_tools.setEnabled(False)
            self.widGestionBD.setEnabled(False)
            # Applying the deactivate style to the buttons
            self.trigger_ltop_button_color()
            self.btnPointDisplay.setStyleSheet(self.stylesSheetFalse)
            self.btnPointUpdateKoo.setStyleSheet(self.stylesSheetFalse)
            self.btnMesDisplay.setStyleSheet(self.stylesSheetFalse)
            self.btnMesUpdateMes.setStyleSheet(self.stylesSheetFalse)
            self.btnResDisplayPrnx.setStyleSheet(self.stylesSheetFalse)
            # Clear text fields in tabs
            self.txtNewDB.clear()
            self.txtNameKoo.clear()
            self.txtTitleKoo.clear()
            self.txtNameMes.clear()
            self.txtTitleMes.clear()
            self.txtConsole.clear()
            # Applying an empty table model to the point, station and measurement tables
            self.db_table_unload()
            # Set initial value to all the .DAT panel fields
            self.dat_init_field()

    def db_table_unload(self):
        """ Unload the DB model in all tables by applying an empty model """
        model = QtSql.QSqlTableModel()
        model.select()
        self.tblPoint.setModel(model)
        self.tblMesStation.setModel(model)
        self.tblMesMesure.setModel(model)

    def db_file_reload(self):
        """ Reload the list of available db.qltop file in the working directory """
        working_dir = self.pathWorkDirectory.text()
        if working_dir:
            self.cbbListFileDB.clear()
            list_files_db = gt_list_ltop_file("*.qltop")
            if list_files_db:
                self.cbbListFileDB.addItems(list_files_db)
                self.btnLoadFileDB.setEnabled(True)
            else:
                self.btnLoadFileDB.setEnabled(False)
            self.trigger_ltop_button_color()
            return list_files_db

    def koo_file_reload(self):
        """ Reload the list of available Ltop.koo file in the working directory """
        working_dir = self.pathWorkDirectory.text()
        if working_dir:
            self.cbbPointListKoo.clear()
            list_files_koo = gt_list_ltop_file("*.coo", "*.koo", "*.pe", "*.pk")
            self.cbbPointListKoo.addItems(list_files_koo)
            self.trigger_ltop_button_color()
            return list_files_koo

    def mes_file_reload(self):
        """ Reload the list of available Ltop.mes file in the working directory """
        working_dir = self.pathWorkDirectory.text()
        if working_dir:
            self.cbbListFileMes.clear()
            list_files_mes = gt_list_ltop_file("*.me", "*.mes")
            self.cbbListFileMes.addItems(list_files_mes)
            self.trigger_ltop_button_color()
            return list_files_mes

    def dat_file_reload(self):
        """ Reload the list of available Ltop.dat file in the working directory """
        working_dir = self.pathWorkDirectory.text()  ## Current working directory
        db_name = self.cbbListFileDB.currentText()   ## Current database.qltop name
        if working_dir:
            self.cbbListFileDat.clear()
            list_files_dat = gt_list_ltop_file("*.dat")
            self.cbbListFileDat.addItems(list_files_dat)
            self.trigger_ltop_button_color()
            if list_files_dat and db_name:
                self.btnDatUpdateDat.setStyleSheet(self.stylesSheetTrue)
            else:
                self.btnDatUpdateDat.setStyleSheet(self.stylesSheetFalse)
            return list_files_dat

    def prnx_file_reload(self):
        """ Reload the list of available Ltop.prnX file in the working directory """
        working_dir = self.pathWorkDirectory.text()
        list_files_prnx = gt_list_ltop_file("*.prnx")
        if not list_files_prnx:
            self.btnResDisplayPrnx.setStyleSheet(self.stylesSheetFalse)
        if working_dir:
            self.cbbListFilePrnx.clear()
            self.cbbListFilePrnx.addItems(list_files_prnx)
            return list_files_prnx

    def create_new_db(self):
        """ Create a new db.qltop file database """
        db_name = self.txtNewDB.text()
        working_dir = self.pathWorkDirectory.text()
        if db_name and working_dir:
            db = createDB(db_name)
            if db.signal == 0:  ## If the database has been created
                new_index = self.db_file_reload().index(db.db_name)  ## Reload the list of available .qltop file and get the index of the newly created file
                self.cbbListFileDB.setCurrentIndex(new_index)        ## Set the newly created .qltop file to the select box by its index
                self.txtNewDB.clear()                                ## Clear the text input content
                # self.btnPointDisplay.setStyleSheet(self.stylesSheetFalse)  ## Set red color to the koo display point button
                self.db_table_unload()   ## Clear the point DB table view in the .KOO tab
                self.txtConsole.clear()  ## Clear the console
                # Populate the tables in the qtableview
                self.koo_point_table_display()    ## Display the DB point content in the Qtableview in the .KOO panel
                self.mes_station_table_display()  ## Display the DB station content in the Qtableview in the .MES panel
                self.mes_mesure_table_display()   ## Display the DB measurement content in the Qtableview in the .MES panel

                # Update the 'dat_conf' table with the Ltop.KOO and Ltop.MES active data
                if self.txtDat_IF_KOO.text():
                    self.dat_update_db("param1", self.txtDat_IF_KOO.text(), "IF", "")
                if self.txtDat_IF_MES.text():
                    self.dat_update_db("param2", self.txtDat_IF_MES.text(), "IF", "")
                self.dat_init_field()  ## Set initial value to all the .DAT panel fields

    def trigger_ltop_button_color(self):
        """
            Detect if there is a Ltop.koo, Ltop.mes and Ltop.dat files
            in the working directory.
            If all the three files exists the "Ltop start calculation"
            button become green, else it stays red.
        """
        selected_file_koo = self.cbbPointListKoo.currentText()
        selected_file_mes = self.cbbListFileMes.currentText()
        selected_file_dat = self.cbbListFileDat.currentText()
        if selected_file_koo and selected_file_mes and selected_file_dat:
            self.btnDatLaunchLtop.setStyleSheet(self.stylesSheetTrue)
        else:
            self.btnDatLaunchLtop.setStyleSheet(self.stylesSheetFalse)

    def conf_set_project_epsg(self):
        """ Get the epsg number of the current project and populate it in the config. tab """
        epsg_full = iface.mapCanvas().mapSettings().destinationCrs().authid()
        self.selSysProj.setCrs(QgsCoordinateReferenceSystem(epsg_full))

    def load_db_file(self):
        """ Load the content of the database into the user interface for further manipulation """

        db_name = self.cbbListFileDB.currentText()                  ## Current database.qltop name
        if db_name:

            self.txtConsole.clear()                                 ## Clear the console
            db_name = self.cbbListFileDB.currentText()              ## Current database.qltop name

            table_points = generalToolsDB.select_tbl_items(db_name, "point_pk")       ## Instance selection points in DB
            table_stations = generalToolsDB.select_tbl_items(db_name, "mes_station")  ## Instance selection stations in DB
            table_mesures = generalToolsDB.select_tbl_items(db_name, "mes_mesure")    ## Instance selection mesaures in DB
            table_conf = generalToolsDB.select_tbl_items(db_name, "dat_conf")         ## Instance selection ltop configuration in DB

            # Add information in the console -> header part
            header = "<p style=\'color:#FFFAFA;\'>"
            header += "+"*42 + "<br>"
            header += "Chargement de la base de donn√©es : {} <br>".format(db_name)
            header += "="*42 + "</p>"
            self.txtConsole.appendHtml(header)
            middle = "<span style=\'white-space:pre;color:#FFFAFA;\'>"

            self.koo_point_table_display()  ## Display the DB point content in the Qtableview in the .KOO panel
            if table_points:
                if len(table_points) > 1:
                    middle += u"{} points charg√©s".format(len(table_points))
                else:
                    middle += u"{} point charg√©".format(len(table_points))
            else:
                middle += u"-> il n'existe aucun point dans la base de donn√©es"

            self.mes_station_table_display()  ## Display the DB station content in the Qtableview in the .MES panel
            if table_stations:
                if len(table_stations) > 1:
                    middle += u"<br>{} stations charg√©es".format(len(table_stations))
                else:
                    middle += u"<br>{} station charg√©e".format(len(table_stations))
            else:
                middle += u"<br>-> il n'existe aucune station dans la base de donn√©es"

            self.mes_mesure_table_display()   ## Display the DB measurement content in the Qtableview in the .MES panel
            if table_mesures:
                if len(table_mesures) > 1:
                    middle += u"<br>{} lignes de mesures charg√©es".format(len(table_mesures))
                else:
                    middle += u"<br>{} ligne de mesure charg√©e".format(len(table_mesures))
            else:
                middle += u"<br>-> il n'existe aucune ligne de mesure dans la base de donn√©es"

            # Display the DB Ltop configuration content in the .DAT panel
            if table_conf:
                middle += u"<br>Param√®tres de configuration Ltop charg√©s"
                self.dat_maj_field_from_db(table_conf)

            middle += "</span>"
            self.txtConsole.appendHtml(middle)
            footer = "<p style=\'color:#FFFAFA;\'>" + "="*42 + "<br>"
            self.txtConsole.appendHtml(footer)

    def qltop_file_create_trigger(self):
        """ Activate the create button if a file name is defined """
        file_name = self.txtNewDB.text()  ## new file name without extension
        if file_name:
            self.btnCreateNewDB.setEnabled(True)
        else:
            self.btnCreateNewDB.setEnabled(False)

    ################################################################################################
    ########################################## .KOO PART ###########################################
    ################################################################################################

    def load_koo_file(self):
        """ Load an existing Ltop.koo file to the database """
        db_name = self.cbbListFileDB.currentText()
        if gt_check_db_exist(db_name):
            try:
                QApplication.setOverrideCursor(Qt.WaitCursor)  ## Start the 'wait' cursor
                koo_file = self.cbbPointListKoo.currentText()
                load_point = loadPoint(koo_file)
                # Handle error if no Ltop.koo file is loaded or dialog is canceled
                if load_point.file_content:
                    # Display the file content in the console
                    header = "<p style=\'color:#FFB000;\'>"
                    header += "+"*42 + "<br>"
                    header += "Chargement du fichier de points : {} <br>".format(koo_file)
                    header += "="*42 + "</p>"
                    self.txtConsole.appendHtml(header)

                    for point in load_point.file_content:
                        middle = "<span style=\'white-space:pre;color:#FFB000;\'>"
                        middle += point
                        middle += "</span>"
                        self.txtConsole.appendHtml(middle)
                    # Load the points into the database
                    load_point_data = managePointsDB.insert_point_pk_table(db_name, load_point.file_list[1])

                    # Display the footer in the console
                    footer = "<p style=\'color:#FFB000;\'>" + "="*42 + "<br>"
                    if load_point_data > 1:
                        footer += u"{} points ins√©r√©s avec succ√®s".format(load_point_data)
                    elif load_point_data == 1:
                        footer += u"{} point ins√©r√© avec succ√®s".format(load_point_data)
                    else:
                        footer += u"Aucun point ins√©r√©"
                    footer += u" dans la base de donn√©es : {}<br>".format(db_name)
                    footer += "+"*42 + "<br></p>"
                    self.txtConsole.appendHtml(footer)
                    # Indicate to the user that he can display the points in the Qgis canvas
                    if load_point_data > 0:
                        self.btnPointDisplay.setStyleSheet(self.stylesSheetTrue)
                        self.btnPointUpdateKoo.setStyleSheet(self.stylesSheetTrue)
                        self.koo_point_table_display()  # Display the DB point content in the Qtableview in the .KOO panel
                QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
            except:
                QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
                pass

    def koo_rmv_table_row(self, table_name, id_name):
        """ Delete selected rows in the point table """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        index = self.tblPoint.selectionModel().selectedIndexes()
        if len(index) > 0:
            self.dlg = pointDeleteConfirmationDialog()
            if self.dlg.exec_():
                row_list = []
                for item in index:
                    row_id = item.sibling(item.row(), 0).data()    ## 0 = id in the table
                    row_list.append([row_id])
                generalToolsDB.rmv_sel_row(db_name, table_name, id_name, row_list)

    def koo_point_table_display(self):

        db_name = self.cbbListFileDB.currentText()      ## Current database.qltop name

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(db_name)

        # Definition of the model
        model = kooPointModel()
        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()
        # Applying the model to the table view
        self.tblPoint.setModel(model)

        # Define the minimum row height
        self.tblPoint.verticalHeader().setDefaultSectionSize(20)

        # Redefine the header column name
        model.setHeaderData(1, QtCore.Qt.Horizontal, u"Nom")
        model.setHeaderData(1, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(8, QtCore.Qt.Horizontal, u"Est [m]")
        model.setHeaderData(8, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(9, QtCore.Qt.Horizontal, u"Nord [m]")
        model.setHeaderData(9, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(11, QtCore.Qt.Horizontal, u"Altitude [m]")
        model.setHeaderData(11, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(13, QtCore.Qt.Horizontal, u"Code coord.")
        model.setHeaderData(13, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(14, QtCore.Qt.Horizontal, u"Cote g√©o√Øde [m]")
        model.setHeaderData(14, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(28, QtCore.Qt.Horizontal, u"Commentaire")
        model.setHeaderData(28, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)

        # Ajust the column width
        # No auto stretch on all the columns -> it take time to proceed if there is a lot of points
        header = self.tblPoint.horizontalHeader()
        header.setSectionResizeMode(28, QtWidgets.QHeaderView.Stretch)

        # Hide unwanted column
        list_hide_column = (0, 2, 3, *range(4, 8), 10, 12, *range(15, 28))
        for item in list_hide_column:
            self.tblPoint.hideColumn(item)

        tbl_name = "point_pk"
        table_res = generalToolsDB.select_tbl_items(db_name, tbl_name)  ## Instance selection points in DB
        if table_res:
            self.btnPointDisplay.setStyleSheet(self.stylesSheetTrue)
            self.btnPointUpdateKoo.setStyleSheet(self.stylesSheetTrue)
        else:
            self.btnPointDisplay.setStyleSheet(self.stylesSheetFalse)
            self.btnPointUpdateKoo.setStyleSheet(self.stylesSheetFalse)

    def db_point_load_qgs(self):
        """"
            Add new point to the database.qltop_points based on the
            geometry of selected item in the Qgis canvas.
        """
        db_name = self.cbbListFileDB.currentText()  # Current database.qltop name
        new_point = importQgsPoint()                         # Instance selection points from Qgis
        import_point = new_point.list_point_2_import         # List points from previous instance
        if import_point:
            managePointsDB.add_qgs_point(db_name, import_point)
            self.koo_point_table_display()  # Display the DB point content in the Qtableview in the .KOO panel

    def db_point_table_menu(self, position):
        """ Add a contextual menu to the point table view """
        # Create the menu
        menu = QMenu()
        # Menu options
        def_attr = menu.addMenu(u"Attributs")
        cde_coord = def_attr.addMenu(u"Code de coordonn√©es")
        cde_coord_mi = cde_coord.addAction(u"MI - MN03")
        cde_coord_lv = cde_coord.addAction(u"LV - MN95")
        menu.addSeparator()
        add_row = menu.addAction(u"Ins√©rer une ligne vide")
        add_qgs = menu.addAction(u"Ajouter des points Qgis")
        rmv_row = menu.addAction(u"Supprimer")
        sel_all = menu.addAction(u"S√©lectionner toutes les lignes")
        menu.addSeparator()
        maj_pnt = menu.addAction(u"Afficher les points dans Qgis")
        jmp_coo = menu.addAction(u"Aller aux coordonn√©es du point")
        action = menu.exec_(self.tblPoint.mapToGlobal(position))
        # Define the menu actions
        if action == cde_coord_mi:
            self.db_point_change_attr(u"coord_code", "MI")
        if action == cde_coord_lv:
            self.db_point_change_attr(u"coord_code", "LV")
        if action == add_row:
            db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
            generalToolsDB.add_new_row(db_name, "point_pk")
            self.koo_point_table_display()
        if action == add_qgs:
            self.db_point_load_qgs()
        if action == rmv_row:
            self.koo_rmv_table_row("point_pk", "id_point")
            self.koo_point_table_display()
        if action == sel_all:
            self.tblPoint.selectAll()
        if action == maj_pnt:
            self.qgis_display_points()
        if action == jmp_coo:
            self.koo_jump_coordinates()

    def koo_jump_coordinates(self):
        """ Jump to the coordinates in Qgis """
        try:
            index = self.tblPoint.selectionModel().selectedIndexes()  ## index of selected rows
            if len(index) > 0:
                coo_list = []
                for item in index:
                    row_y = item.sibling(item.row(), 8).data()  ## 8 = coordY in the point_pk table
                    row_x = item.sibling(item.row(), 9).data()  ## 9 = coordX in the point_pk table
                    coo_list.append([row_y, row_x])
                est = float(coo_list[0][0])
                nord = float(coo_list[0][1])
                map_pos = QgsPointXY(est, nord)
                canvas = iface.mapCanvas()
                canvas.setCenter(map_pos)  ## Jump to coordinates
                canvas.refresh()
        except:
            print("Failed to jump to the coordinates")

    def db_point_change_attr(self, field_name, bool_value):
        """ Change the attributes to the selected rows """
        db_name = self.cbbListFileDB.currentText()    ## Current database.qltop name
        index = self.tblPoint.selectionModel().selectedIndexes()  ## index of selected rows
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id = item.sibling(item.row(), 0).data()  ## 0 = id in the point_pk table
                row_list.append([row_id])
            managePointsDB.change_string_attr(db_name, field_name, bool_value, row_list)
        self.koo_point_table_display()  ## Update the DB point content in the Qtableview in the .KOO panel

    def koo_file_create(self):
        """
            Create a new empty Ltop.koo file
            with the format $$ and a title if provided
        """
        try:
            file_name = self.txtNameKoo.text()        ## new file name without extension
            title = self.txtTitleKoo.text()           ## optional title
            format = self.cbbFormatKoo.currentText()  ## $$ format

            nf = gtCreateFile(file_name, title, format, ".koo", 156)  ## Instance to create the new file

            # Add the newly created .koo file to the current .koo file select box
            new_index = self.koo_file_reload().index(nf.final_file_name)  ## Reload the list of available .koo file and get the index of the newly created file
            self.cbbPointListKoo.setCurrentIndex(new_index)  ## Set the newly created .koo file to the select box by its index
        except:
            print("qltop_dockwidget -> Failed to create a new Ltop.dat file (def koo_file_create)")
        finally:
            self.txtNameKoo.clear()   ## Empty the line
            self.txtTitleKoo.clear()  ## Empty the line

    def koo_file_create_trigger(self):
        """ Activate the create button if a file name is defined """
        file_name = self.txtNameKoo.text()  ## new file name without extension
        if file_name:
            self.btnPointCreateKoo.setEnabled(True)
        else:
            self.btnPointCreateKoo.setEnabled(False)

    def qgis_display_points(self):
        """ Display the points content of the database in the Qgis canvas """
        db_name = self.cbbListFileDB.currentText()                           ## Current database.qltop name
        selected_epsg = self.selSysProj.crs().authid()                                ## Current project epsg/srs/crs
        table_points = generalToolsDB.select_tbl_items(db_name, "point_pk")  ## Instance selection points in DB
        disp_points = displayLayerPoint(table_points, selected_epsg, "zoom")          ## Create and display the point layer

    def koo_file_update(self):
        """ Update the selected Ltop.koo file with the database content """
        db_name = self.cbbListFileDB.currentText()                           ## Current database.qltop name
        selected_koo_file = self.cbbPointListKoo.currentText()               ## Ltop.koo file to be updated
        table_points = generalToolsDB.select_tbl_items(db_name, "point_pk")  ## Instance selection points in DB
        if table_points:
            update = kooUpdateFile(table_points, selected_koo_file)

    ################################################################################################
    ########################################## .MES PART ###########################################
    ################################################################################################

    def load_mes_file(self):
        """ Load an existing Ltop.mes file to the database """
        db_name = self.cbbListFileDB.currentText()
        if gt_check_db_exist(db_name):
            try:
                QApplication.setOverrideCursor(Qt.WaitCursor)  ## Start the 'wait' cursor
                mes_file = self.cbbListFileMes.currentText()
                load_mesure = loadMesure(mes_file)
                # Handle error if no Ltop.koo file is loaded or dialog is canceled
                if load_mesure.file_content:
                    # Display the file content in the console
                    header = "<p style=\'color:#FF00FF;\'>"
                    header += "+"*42 + "<br>"
                    header += "Chargement du fichier de mesures : {} <br>".format(mes_file)
                    header += "="*42 + "</p>"
                    self.txtConsole.appendHtml(header)

                    for l in load_mesure.file_content:
                        middle = "<span style=\'white-space:pre;color:#FF00FF;\'>"
                        middle += l
                        middle += "</span>"
                        self.txtConsole.appendHtml(middle)

                    # Load the station points in the database
                    load_station_data = manageMeasureDB.insert_station_table(db_name, load_mesure.file_list[1])
                    if load_station_data > 0:
                        self.mes_station_table_display()  ## Display the DB station content in the Qtableview in the .MES panel

                    # Display the footer in the console
                    footer = "<p style=\'color:#FF00FF;\'>" + "="*42 + "<br>"
                    if load_station_data > 1:
                        footer += u"{} stations ins√©r√©es avec succ√®s".format(load_station_data)
                    elif load_station_data == 1:
                        footer += u"{} station ins√©r√©e avec succ√®s".format(load_station_data)
                    else:
                        footer += u"Aucune station ins√©r√©e"

                    # Load the measurements in the database
                    load_mesure_data = manageMeasureDB.insert_mesure_table(db_name, load_mesure.file_list[2])
                    if load_mesure_data > 0:
                        self.mes_mesure_table_display()  ## Display the DB mesure content in the Qtableview in the .MES panel

                    if load_mesure_data > 1:
                        footer += u"<br>{} mesures ins√©r√©es avec succ√®s".format(load_mesure_data)
                    elif load_mesure_data == 1:
                        footer += u"<br>{} mesure ins√©r√©e avec succ√®s".format(load_mesure_data)
                    else:
                        footer += u"<br>Aucune mesure ins√©r√©e"

                    footer += u"<br>dans la base de donn√©es : {}<br>".format(db_name)
                    footer += "+"*42 + "<br></p>"
                    self.txtConsole.appendHtml(footer)

                    # Indicate to the user that he can display the points in the Qgis canvas
                    if load_station_data > 0:
                        self.btnMesDisplay.setStyleSheet(self.stylesSheetTrue)
                        self.btnMesUpdateMes.setStyleSheet(self.stylesSheetTrue)
                        self.mes_mesure_table_display()   ## Display the DB mesure content in the Qtableview in the .MES panel
                QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
            except:
                QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
                pass

    def sta_rmv_table_row(self):
        """ Delete selected rows in the station table """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        index = self.tblMesStation.selectionModel().selectedIndexes()
        if len(index) > 0:
            self.dlg = stationDeleteConfirmationDialog()  ## Confirmation dialog box to call
            if self.dlg.exec_():
                row_list = []
                for item in index:
                    row_id = item.sibling(item.row(), 0).data()    ## 0 = id in the table
                    row_list.append([row_id])
                generalToolsDB.rmv_sel_row(db_name, "mes_station", "id_st", row_list)

    def mes_rmv_table_row(self):
        """ Delete selected rows in the measurement table """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        index = self.tblMesMesure.selectionModel().selectedIndexes()
        if len(index) > 0:
            self.dlg = mesureDeleteConfirmationDialog()  ## Confirmation dialog box to call
            if self.dlg.exec_():
                row_list = []
                for item in index:
                    row_id = item.sibling(item.row(), 0).data()    ## 0 = id in the table
                    row_list.append([row_id])
                generalToolsDB.rmv_sel_row(db_name, "mes_mesure", "id_mes", row_list)

    def sta_dupli_table_row(self):
        """ Duplicate an entire row of the measurement table """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        index = self.tblMesStation.selectionModel().selectedIndexes()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id = item.sibling(item.row(), 0).data()    ## 0 = id in the table
                row_list.append([row_id])
            manageMeasureDB.mes_station_duplicate(db_name, row_list)

    def mes_dupli_table_row(self):
        """ Duplicate an entire row of the measurement table """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        index = self.tblMesMesure.selectionModel().selectedIndexes()
        if len(index) > 0:
            row_list = []
            for item in index:
                row_id = item.sibling(item.row(), 0).data()    ## 0 = id in the table
                row_list.append([row_id])
            manageMeasureDB.mes_mesure_duplicate(db_name, row_list)

    def mes_station_table_display(self):
        """ Display the DB stations into the table view in the .Mes tab """

        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(db_name)

        # Definition of the model
        model = mesStationModel()
        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()
        # Applying the model to the table view
        self.tblMesStation.setModel(model)

        # Redefine the header column name and alignment
        model.setHeaderData(2, Qt.Horizontal, u"Station")
        model.setHeaderData(2, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(3, Qt.Horizontal, u"# St.")
        model.setHeaderData(3, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(4, Qt.Horizontal, u"Type")
        model.setHeaderData(4, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(5, Qt.Horizontal, u"M√©t√©o")
        model.setHeaderData(5, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(6, Qt.Horizontal, u"E.m. g√©n.dir. [cc]")
        model.setHeaderData(6, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(7, Qt.Horizontal, u"Groupe g√©n√©ral")
        model.setHeaderData(7, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(8, Qt.Horizontal, u"Hi [m]")
        model.setHeaderData(8, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(9, Qt.Horizontal, u"Carnet terrain")
        model.setHeaderData(9, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(10, Qt.Horizontal, u"Op√©rateur")
        model.setHeaderData(10, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(11, Qt.Horizontal, u"Err. centrage [mm]")
        model.setHeaderData(11, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        # Ajust the column width
        self.tblMesStation.setColumnWidth(3, 30)
        header = self.tblMesStation.horizontalHeader()
        header.setSectionResizeMode(11, QtWidgets.QHeaderView.Stretch)

        # Define the minimum row height
        self.tblMesStation.verticalHeader().setDefaultSectionSize(20)

        # Hide unwanted column
        list_hide_column = (0, 1)
        for item in list_hide_column:
            self.tblMesStation.hideColumn(item)

    def mes_mesure_table_display(self):
        """ Display the DB mesurements into the table view in the .MES tab """

        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name

        # Database definition
        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(db_name)

        # Definition of the model
        model = mesMesureModel()
        # Mandatory !! loop to fetch all the records of a query
        while model.canFetchMore():
            model.fetchMore()
        # Applying the model to the table view
        self.tblMesMesure.setModel(model)

        # Redefine the header column name and alignment
        model.setHeaderData(1, Qt.Horizontal, u"Station")
        model.setHeaderData(1, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(2, Qt.Horizontal, u"# St.")
        model.setHeaderData(2, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        model.setHeaderData(3, Qt.Horizontal, u"Point vis√©")
        model.setHeaderData(3, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)
        model.setHeaderData(4, Qt.Horizontal, u"Type")
        model.setHeaderData(4, Qt.Horizontal, Qt.AlignLeft, Qt.TextAlignmentRole)

        model.setHeaderData(5, Qt.Horizontal, u"Direction")
        model.setHeaderData(5, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(6, Qt.Horizontal, u"Angle z√©nit.")
        model.setHeaderData(6, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(7, Qt.Horizontal, u"Distance")
        model.setHeaderData(7, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        model.setHeaderData(8, Qt.Horizontal, u"em Dir.")
        model.setHeaderData(8, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(9, Qt.Horizontal, u"em Z√©nit.")
        model.setHeaderData(9, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(10, Qt.Horizontal, u"em Dist.")
        model.setHeaderData(10, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        model.setHeaderData(11, Qt.Horizontal, u"Grp Dir.")
        model.setHeaderData(11, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(12, Qt.Horizontal, u"Grp Z√©nit.")
        model.setHeaderData(12, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)
        model.setHeaderData(13, Qt.Horizontal, u"Grp Dist.")
        model.setHeaderData(13, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        model.setHeaderData(15, Qt.Horizontal, u"Hs [m]")
        model.setHeaderData(15, Qt.Horizontal, Qt.AlignRight, Qt.TextAlignmentRole)

        # Ajust the column width
        self.tblMesMesure.setColumnWidth(2, 30)
        header = self.tblMesMesure.horizontalHeader()
        header.setSectionResizeMode(16, QtWidgets.QHeaderView.Stretch)

        # Define the minimum row height
        self.tblMesMesure.verticalHeader().setDefaultSectionSize(20)

        # Hide unwanted column
        list_hide_column = (0, 14)  ## id_mes + hi
        for item in list_hide_column:
            self.tblMesMesure.hideColumn(item)

        tbl_name = "mes_mesure"
        table_res = generalToolsDB.select_tbl_items(db_name, tbl_name)  ## Instance selection stations in DB
        if table_res:
            self.btnMesDisplay.setStyleSheet(self.stylesSheetTrue)
            self.btnMesUpdateMes.setStyleSheet(self.stylesSheetTrue)
        else:
            self.btnMesDisplay.setStyleSheet(self.stylesSheetFalse)
            self.btnMesUpdateMes.setStyleSheet(self.stylesSheetFalse)

    def mes_station_table_menu(self, position):
        """ Add a contextual menu to the station table view """
        # Create the menu
        menu = QMenu()
        # Menu options
        add_row = menu.addAction(u"Ins√©rer une ligne vide")
        dup_row = menu.addAction(u"Dupliquer la ligne")
        rmv_row = menu.addAction(u"Supprimer")
        sel_all = menu.addAction(u"S√©lectionner toutes les lignes")
        action = menu.exec_(self.tblMesStation.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
            generalToolsDB.add_new_row(db_name, "mes_station")
            self.mes_station_table_display()
        if action == dup_row:
            self.sta_dupli_table_row()
            self.mes_station_table_display()
        if action == rmv_row:
            self.sta_rmv_table_row()
            self.mes_station_table_display()
        if action == sel_all:
            self.tblMesStation.selectAll()

    def mes_mesure_table_menu(self, position):
        """ Add a contextual menu to the mesure table view """
        # Create the menu
        menu = QMenu()
        # Menu options
        add_row = menu.addAction(u"Ins√©rer une ligne vide")
        dup_row = menu.addAction(u"Dupliquer la ligne")
        rmv_row = menu.addAction(u"Supprimer")
        sel_all = menu.addAction(u"S√©lectionner toutes les lignes")
        action = menu.exec_(self.tblMesMesure.mapToGlobal(position))
        # Define the menu actions
        if action == add_row:
            st_atr = self.mes_station_selected_test()
            db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
            if st_atr:  ## with a selected station
                manageMeasureDB.mes_add_row_attr(db_name, st_atr)
            else:       ## without a selected station
                generalToolsDB.add_new_row(db_name, "mes_mesure")
            self.mes_mesure_table_display()
        if action == dup_row:
            self.mes_dupli_table_row()
            self.mes_mesure_table_display()
        if action == rmv_row:
            self.mes_rmv_table_row()
            self.mes_mesure_table_display()
        if action == sel_all:
            self.tblMesMesure.selectAll()

    def mes_station_selected_test(self):
        """
            Test if station is selected in the table
            return these attributes : (station name, station number)
        """
        db_name = self.cbbListFileDB.currentText()         ## Current database.qltop name
        index = self.tblMesStation.selectionModel().selectedIndexes()  ## index of selected rows
        if len(index) > 0:
            row_attr = []
            item = index[0]  ## If multiple station selected take the first one only
            point = item.sibling(item.row(), 2).data()      ## 2 = point in the mes_station table
            num_point = item.sibling(item.row(), 3).data()  ## 3 = num_point in the mes_station table
            row_attr.append(point)
            row_attr.append(num_point)
            return row_attr

    def mes_file_create(self):
        """
            Create a new empty Ltop.mes file
            with a title if provided
        """
        try:
            file_name = self.txtNameMes.text()  ## new file name without extension
            title = self.txtTitleMes.text()     ## optional title

            nf = gtCreateFile(file_name, title, "$$ME", ".mes", 86)   # Instance to create the new file

            # Add the newly created .mes file to the current .mes file select box
            new_index = self.mes_file_reload().index(nf.final_file_name)  # Reload the list of available .mes file and get the index of the newly created file
            self.cbbListFileMes.setCurrentIndex(new_index)  # Set the newly created .mes file to the select box by its index
        except:
            pass
        finally:
            self.txtNameMes.clear()   ## Empty the line
            self.txtTitleMes.clear()  ## Empty the line

    def mes_file_create_trigger(self):
        """ Activate the create button if a file name is defined """
        file_name = self.txtNameMes.text()  # new file name without extension
        if file_name:
            self.btnMesCreateMes.setEnabled(True)
        else:
            self.btnMesCreateMes.setEnabled(False)

    def qgis_display_mesures(self):
        """ Display the measurement content of the database in the Qgis canvas """
        db_name = self.cbbListFileDB.currentText()                                       ## Current database.qltop name
        selected_epsg = self.selSysProj.crs().authid()                                   ## Current project epsg/srs/crs
        table_mesures = generalToolsDB.select_tbl_items(db_name, "station_mesure_view")  ## Instance selection mesures in DB
        disp_mesures = displayLayerMesure(table_mesures, selected_epsg)                  ## Create and display the mesure layer

    def mes_file_update(self):
        """ Update the selected Ltop.mes file with the database content """
        db_name = self.cbbListFileDB.currentText()                                 ## Current database.qltop name
        selected_mes_file = self.cbbListFileMes.currentText()                      ## Ltop.mes file to be updated
        table_stations = generalToolsDB.select_tbl_items(db_name, "station_view")  ## Instance selection stations in DB
        table_mesures = generalToolsDB.select_tbl_items(db_name, "mesure_view")    ## Instance selection mesures in DB
        if table_stations and table_mesures:
            update = mesUpdateFile(table_stations, table_mesures, selected_mes_file)
        else:
            iface.messageBar().pushMessage("Attention : ",
                                           u"*** Donn√©es insuffisantes, export √©chou√© ***",
                                           level=Qgis.Warning,
                                           duration=3)

    ################################################################################################
    ########################################## .DAT PART ###########################################
    ################################################################################################

    def dat_file_create_trigger(self):
        """ Activate the create button if a file name is defined """
        file_name = self.txtNameDat.text()  ## new file name without extension
        if file_name:
            self.btnDatCreateDat.setEnabled(True)
        else:
            self.btnDatCreateDat.setEnabled(False)

    def dat_file_create(self):
        """ Create a new empty Ltop.dat file """
        try:
            file_name = self.txtNameDat.text()        ## new file name without extension

            nf = gtCreateFile(file_name, "", "", ".dat", 0)  ## Instance to create the new file

            # Add the newly created .dat file to the current .dat file select box
            new_index = self.dat_file_reload().index(nf.final_file_name)  ## Reload the list of available .dat file and get the index of the newly created file
            self.cbbListFileDat.setCurrentIndex(new_index)  ## Set the newly created .dat file to the select box by its index
        except:
            pass
        finally:
            self.txtNameDat.clear()   ## Empty the line

    def load_dat_file(self):
        """ Load an existing Ltop.dat file to the database """
        db_name = self.cbbListFileDB.currentText()
        if gt_check_db_exist(db_name):
            try:
                QApplication.setOverrideCursor(Qt.WaitCursor)  ## Start the 'wait' cursor
                epsg = self.selSysProj.crs().authid()          ## Current project epsg/srs/crs
                dat_file = self.cbbListFileDat.currentText()   ## Current Ltop.dat file name
                load_dat = loadDatConf(db_name, dat_file)      ## Create a list of KA values from the Ltop.dat file

                # Load data in the database
                if load_dat.ka_no_descr:
                    self.dat_maj_db_from_dat_no_desc(load_dat.ka_no_descr)
                if load_dat.ka_with_descr:
                    self.dat_maj_db_from_dat_with_desc(load_dat.ka_with_descr)

                # Looad data from the database to the .DAT panel fields
                table_conf = generalToolsDB.select_tbl_items(db_name, "dat_conf")  ## Instance selection ltop configuration in DB
                if table_conf:
                    self.dat_maj_field_from_db(table_conf)  ## Set the value to the .DAT panel fields

                if load_dat.file_content:  ## Handle error if no Ltop.dat file is loaded or dialog is canceled
                    # Update the point symbology in the Qgis canevas
                    table_points = generalToolsDB.select_tbl_items(db_name, "point_pk")  ## Instance selection points in DB
                    dat_maj_PF_in_Qgis(table_points, epsg)  ## Update the qltop point layer if already exist in canevas

                    # Display the file content in the console
                    header = "<p style=\'color:#00ffff;\'>"
                    header += "+"*42 + "<br>"
                    header += "Chargement du fichier de configuration : {} <br>".format(load_dat)
                    header += "="*42 + "</p>"
                    self.txtConsole.appendHtml(header)

                    for row in load_dat.file_content:
                        middle = "<span style=\'white-space:pre;color:#00ffff;\'>"
                        middle += row
                        middle += "</span>"
                        self.txtConsole.appendHtml(middle)

                    # Display the footer in the console
                    footer = "<p style=\'color:#00ffff;\'>" + "="*42 + "<br>"
                    footer += u"Fichier de configuration {} charg√© dans la base de donn√©es : {}<br>".format(dat_file, db_name)
                    footer += "+"*42 + "<br></p>"
                    self.txtConsole.appendHtml(footer)
                QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
            except:
                QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
                pass

    def dat_file_create_trigger(self):
        """ Activate the create button if a file name is defined """
        file_name = self.txtNameDat.text()  ## new file name without extension
        if file_name:
            self.btnDatCreateDat.setEnabled(True)
        else:
            self.btnDatCreateDat.setEnabled(False)

    def dat_open_fixed_point_dialog(self):
        """ Open the fixed point management dialog box """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        epsg = self.selSysProj.crs().authid()       ## Current project epsg/srs/crs
        if db_name:
            dat_show_PF_dialog(db_name, epsg)

    def dat_open_relatives_point_dialog(self):
        """ Open the reliability relatives point management dialog box """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        if db_name:
            dat_show_reliability_dialog(db_name)

    def dat_open_dist_dir_grp_dialog(self):
        """ Open the distance/direction group management dialog box """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        if db_name:
            dat_show_grp_dist_dir_dialog(db_name)

    def dat_maj_IF_KOO_param(self):
        """ Update the 'KA' 'IF' 'KOO' param. in the .DAT panel """
        val = self.cbbPointListKoo.currentText()
        self.txtDat_IF_KOO.setText(val)

    def dat_maj_IF_MES_param(self):
        """ Update the 'KA' 'IF' 'MES' param. in the .DAT panel """
        val = self.cbbListFileMes.currentText()
        self.txtDat_IF_MES.setText(val)

    def dat_maj_field_from_db(self, data):
        """ Update the .DAT panel field from the db.qltop database """
        self.txtDAT_OF_PRN.setText(data[1][2])
        self.txtDAT_OF_RES.setText(data[1][3])
        self.txtDAT_OF_IPL.setText(data[1][4])
        self.txtDAT_00_Titre1.setText(data[2][2])
        self.txtDAT_00_Titre2.setText(data[2][3])
        self.cbbDAT_01_KOORD_P2.setCurrentIndex(self.cbbDAT_01_KOORD_P2.findText(data[3][3],
                                                QtCore.Qt.MatchFixedString))
        self.txtDAT_01_KOORD_P3.setText(data[3][4])
        self.txtDAT_01_KOORD_P4.setText(data[3][5])
        self.txtDAT_01_KOORD_P5.setText(data[3][6])
        self.txtDAT_01_KOORD_P6.setText(data[3][7])
        self.txtDAT_01_KOORD_P7.setText(data[3][8])
        self.txtDAT_01_KOORD_P8.setText(data[3][9])
        self.cbbDAT_01_RUNDUNG_P2.setCurrentIndex(self.cbbDAT_01_RUNDUNG_P2.findText(data[4][3],
                                                  QtCore.Qt.MatchFixedString))
        self.txtDAT_01_RUNDUNG_P3.setText(data[4][4])
        self.cbbDAT_01_KAT_P2.setCurrentIndex(self.cbbDAT_01_KAT_P2.findText(data[5][3],
                                              QtCore.Qt.MatchFixedString))
        self.cbbDAT_01_KAT_P3.setCurrentIndex(self.cbbDAT_01_KAT_P3.findText(data[5][4],
                                              QtCore.Qt.MatchFixedString))
        self.txtDAT_02_LAGEITER_P2.setText(data[6][3])
        self.txtDAT_03_HOEHEITE_P2.setText(data[7][3])
        self.txtDAT_04_LAGEABB_P2.setText(data[8][3])
        self.txtDAT_05_HOEHEABB_P2.setText(data[9][3])
        self.txtDAT_07_MFRIAZ_P2.setText(data[10][3])
        self.txtDAT_07_MFRIAZ_P3.setText(data[10][4])
        self.txtDAT_08_DISTRED_P2.setText(data[11][3])
        self.txtDAT_08_DISTRED_P3.setText(data[11][4])
        self.txtDAT_08_DISTRED_P4.setText(data[11][5])
        self.txtDAT_08_DISTRED_P5.setText(data[11][6])
        self.txtDAT_08_DISTRED_P6.setText(data[11][7])
        self.txtDAT_09_MFHDIS_P2.setText(data[12][3])
        self.txtDAT_09_MFHDIS_P3.setText(data[12][3])
        self.txtDAT_10_MFHW_P2.setText(data[13][3])
        self.txtDAT_11_MFIHSH_P2.setText(data[14][3])
        self.txtDAT_11_MFIHSH_P3.setText(data[14][4])
        self.txtDAT_12_REFR_P2.setText(data[15][3])
        self.txtDAT_12_REFR_P3.setText(data[15][4])
        self.txtDAT_13_P2.setText(data[16][3])
        self.txtDAT_13_P3.setText(data[16][4])
        self.cbbDAT_13_P4.setCurrentIndex(self.cbbDAT_13_P4.findText(data[16][5],
                                          QtCore.Qt.MatchFixedString))
        self.cbbDAT_14_KOOVERZ_P2.setCurrentIndex(self.cbbDAT_14_KOOVERZ_P2.findText(data[17][3],
                                                  QtCore.Qt.MatchFixedString))
        self.cbbDAT_14_KOOVERZ_P3.setCurrentIndex(self.cbbDAT_14_KOOVERZ_P3.findText(data[17][4],
                                                  QtCore.Qt.MatchFixedString))
        self.cbbDAT_14_KOOVERZ_P4.setCurrentIndex(self.cbbDAT_14_KOOVERZ_P4.findText(data[17][5],
                                                  QtCore.Qt.MatchFixedString))
        self.txtDAT_14_KOOVERZ_P5.setText(data[17][6])
        self.cbbDAT_14_KOOVERZ_P6.setCurrentIndex(self.cbbDAT_14_KOOVERZ_P6.findText(data[17][7],
                                                  QtCore.Qt.MatchFixedString))
        self.cbbDAT_14_KOOVERZ_P7.setCurrentIndex(self.cbbDAT_14_KOOVERZ_P7.findText(data[17][8],
                                                  QtCore.Qt.MatchFixedString))

        self.cbbDAT_14_PLOT_P2.setCurrentIndex(self.cbbDAT_14_PLOT_P2.findText(data[18][3],
                                               QtCore.Qt.MatchFixedString))
        self.txtDAT_14_PLOT_P3.setText(data[18][4])
        self.txtDAT_14_PLOT_P4.setText(data[18][5])
        self.cbbDAT_14_PLOT_P5.setCurrentIndex(self.cbbDAT_14_PLOT_P5.findText(data[18][6],
                                               QtCore.Qt.MatchFixedString))
        self.txtDAT_14_PLOT_P6.setText(data[18][7])
        self.txtDAT_14_PLOT_P7.setText(data[18][8])
        self.txtDAT_14_PLOT_P8.setText(data[18][9])
        self.cbbDAT_15_MATRIZ_P2.setCurrentIndex(self.cbbDAT_15_MATRIZ_P2.findText(data[19][3],
                                                 QtCore.Qt.MatchFixedString))
        self.cbbDAT_15_MATRIZ_P3.setCurrentIndex(self.cbbDAT_15_MATRIZ_P3.findText(data[19][4],
                                                 QtCore.Qt.MatchFixedString))
        self.cbbDAT_16_PRAEANA_P2.setCurrentIndex(self.cbbDAT_16_PRAEANA_P2.findText(data[20][3],
                                                  QtCore.Qt.MatchFixedString))
        self.cbbDAT_17_PROGVERS_P2.setCurrentIndex(self.cbbDAT_17_PROGVERS_P2.findText(data[21][3],
                                                   QtCore.Qt.MatchFixedString))
        self.cbbDAT_17_PROGVERS_P3.setCurrentIndex(self.cbbDAT_17_PROGVERS_P3.findText(data[21][4],
                                                   QtCore.Qt.MatchFixedString))
        self.cbbDAT_17_PROGVERS_P4.setCurrentIndex(self.cbbDAT_17_PROGVERS_P4.findText(data[21][5],
                                                   QtCore.Qt.MatchFixedString))
        self.txtDAT_17_PROGVERS_P5.setText(data[21][6])
        self.cbbDAT_17_ELLIPS_P2.setCurrentIndex(self.cbbDAT_17_ELLIPS_P2.findText(data[22][3],
                                                 QtCore.Qt.MatchFixedString))
        self.txtDAT_17_ELLIPS_P3.setText(data[22][4])
        self.txtDAT_17_ELLIPS_P4.setText(data[22][5])
        self.txtDAT_17_ELLIPS_P5.setText(data[22][6])
        self.txtDAT_17_ROBUST_P2.setText(data[23][3])
        self.txtDAT_17_ROBUST_P3.setText(data[23][4])
        self.txtDAT_18_IZUVER_P2.setText(data[24][3])
        self.txtDAT_18_IZUVER_P3.setText(data[24][4])
        self.txtDAT_18_IZUVER_P4.setText(data[24][5])
        self.txtDAT_18_IZUVER_P5.setText(data[24][6])
        self.txtDAT_18_IZUVER_P6.setText(data[24][7])
        self.cbbDAT_18_FIAB_P2.setCurrentIndex(self.cbbDAT_18_FIAB_P2.findText(data[25][3],
                                               QtCore.Qt.MatchFixedString))
        self.txtDAT_18_FIAB_P3.setText(data[25][4])
        self.txtDAT_20_P1.setText(data[26][2])
        self.txtDAT_20_P2.setText(data[26][3])
        self.txtDAT_20_P3.setText(data[26][4])
        self.txtDAT_20_P4.setText(data[26][5])

    def dat_maj_db_from_dat_no_desc(self, data):
        """
        Update the db.qltop database form the .DAT file
        KA without description
        """
        if data["OF"]:
            self.dat_update_db("param1", data["OF"][0], "OF", "")
            self.dat_update_db("param2", data["OF"][1], "OF", "")
            self.dat_update_db("param3", data["OF"][2], "OF", "")
        if data["00"]:
            self.dat_update_db("param1", data["00"][0], "00", "")
            self.dat_update_db("param2", data["00"][1], "00", "")
        if data["13"]:
            self.dat_update_db("param2", data["13"][0], "13", "")
            self.dat_update_db("param3", data["13"][1], "13", "")
            self.dat_update_db("param4", data["13"][2], "13", "")
        if data["20"]:
            self.dat_update_db("param1", data["20"][0], "20", "")
            self.dat_update_db("param2", data["20"][1], "20", "")
            self.dat_update_db("param3", data["20"][2], "20", "")
            self.dat_update_db("param4", data["20"][3], "20", "")

    def dat_maj_db_from_dat_with_desc(self, data):
        """
        Update the .DAT panel field with the Ltop.dat file
        KA with description column
        """
        if data["01KOORD"]:
            self.dat_update_db("param2", data["01KOORD"][0], "01", "KOORD")
            self.dat_update_db("param3", data["01KOORD"][1], "01", "KOORD")
            self.dat_update_db("param4", data["01KOORD"][2], "01", "KOORD")
            self.dat_update_db("param5", data["01KOORD"][3], "01", "KOORD")
            self.dat_update_db("param6", data["01KOORD"][4], "01", "KOORD")
            self.dat_update_db("param7", data["01KOORD"][5], "01", "KOORD")
            self.dat_update_db("param8", data["01KOORD"][6], "01", "KOORD")
        if data["01RUNDUNG"]:
            self.dat_update_db("param2", data["01RUNDUNG"][0], "01", "RUNDUNG")
            self.dat_update_db("param3", data["01RUNDUNG"][1], "01", "RUNDUNG")
        if data["01KAT"]:
            self.dat_update_db("param2", data["01KAT"][0], "01", "KAT")
            self.dat_update_db("param3", data["01KAT"][1], "01", "KAT")
        if data["02"]:
            self.dat_update_db("param2", data["02"], "02", "LAGEITER")
        if data["03"]:
            self.dat_update_db("param2", data["03"], "03", "HOEHEITE")
        if data["04"]:
            self.dat_update_db("param2", data["04"], "04", "LAGE ABB")
        if data["05"]:
            self.dat_update_db("param2", data["05"], "05", "HOEHEABB")
        if data["07"]:
            self.dat_update_db("param2", data["07"][0], "07", "MF RI+AZ")
            self.dat_update_db("param3", data["07"][1], "07", "MF RI+AZ")
        if data["08"]:
            self.dat_update_db("param2", data["08"][0], "08", "DIST.RED")
            self.dat_update_db("param3", data["08"][1], "08", "DIST.RED")
            self.dat_update_db("param4", data["08"][2], "08", "DIST.RED")
            self.dat_update_db("param5", data["08"][3], "08", "DIST.RED")
            self.dat_update_db("param6", data["08"][4], "08", "DIST.RED")
        if data["09"]:
            self.dat_update_db("param2", data["09"][0], "09", "MF H.DIS")
            self.dat_update_db("param3", data["09"][1], "09", "MF H.DIS")
        if data["10"]:
            self.dat_update_db("param2", data["10"], "10", "MF HW")
        if data["11"]:
            self.dat_update_db("param2", data["11"][0], "11", "MF IH-SH")
            self.dat_update_db("param3", data["11"][1], "11", "MF IH-SH")
        if data["12"]:
            self.dat_update_db("param2", data["12"][0], "12", "REFRAKT.")
            self.dat_update_db("param3", data["12"][1], "12", "REFRAKT.")
        if data["14KOO.VERZ"]:
            self.dat_update_db("param2", data["14KOO.VERZ"][0], "14", "KOO.VERZ")
            self.dat_update_db("param3", data["14KOO.VERZ"][1], "14", "KOO.VERZ")
            self.dat_update_db("param4", data["14KOO.VERZ"][2], "14", "KOO.VERZ")
            self.dat_update_db("param5", data["14KOO.VERZ"][3], "14", "KOO.VERZ")
            self.dat_update_db("param6", data["14KOO.VERZ"][4], "14", "KOO.VERZ")
            self.dat_update_db("param7", data["14KOO.VERZ"][5], "14", "KOO.VERZ")
        if data["14PLOT"]:
            self.dat_update_db("param2", data["14PLOT"][0], "14", "PLOT")
            self.dat_update_db("param3", data["14PLOT"][1], "14", "PLOT")
            self.dat_update_db("param4", data["14PLOT"][2], "14", "PLOT")
            self.dat_update_db("param5", data["14PLOT"][3], "14", "PLOT")
            self.dat_update_db("param6", data["14PLOT"][4], "14", "PLOT")
            self.dat_update_db("param7", data["14PLOT"][5], "14", "PLOT")
            self.dat_update_db("param8", data["14PLOT"][6], "14", "PLOT")
        if data["15"]:
            self.dat_update_db("param2", data["15"][0], "15", "MATRIZEN")
            self.dat_update_db("param3", data["15"][1], "15", "MATRIZEN")
        if data["16"]:
            self.dat_update_db("param2", int(data["16"]), "16", "PRAEANA.")
        if data["17PROGVERS"]:
            self.dat_update_db("param2", data["17PROGVERS"][0], "17", "PROGVERS")
            self.dat_update_db("param3", data["17PROGVERS"][1], "17", "PROGVERS")
            self.dat_update_db("param4", data["17PROGVERS"][2], "17", "PROGVERS")
            self.dat_update_db("param5", data["17PROGVERS"][3], "17", "PROGVERS")
        if data["17ELLIPSOI"]:
            self.dat_update_db("param2", data["17ELLIPSOI"][0], "17", "ELLIPSOI")
            self.dat_update_db("param3", data["17ELLIPSOI"][1], "17", "ELLIPSOI")
            self.dat_update_db("param4", data["17ELLIPSOI"][2], "17", "ELLIPSOI")
            self.dat_update_db("param5", data["17ELLIPSOI"][3], "17", "ELLIPSOI")
        if data["17ROBUST"]:
            self.dat_update_db("param2", data["17ROBUST"][0], "17", "ROBUST")
            self.dat_update_db("param3", data["17ROBUST"][1], "17", "ROBUST")
        if data["18I.ZUVERL"]:
            self.dat_update_db("param2", data["18I.ZUVERL"][0], "18", "I.ZUVERL")
            self.dat_update_db("param3", data["18I.ZUVERL"][1], "18", "I.ZUVERL")
            self.dat_update_db("param4", data["18I.ZUVERL"][2], "18", "I.ZUVERL")
            self.dat_update_db("param5", data["18I.ZUVERL"][3], "18", "I.ZUVERL")
            self.dat_update_db("param6", data["18I.ZUVERL"][4], "18", "I.ZUVERL")
        if data["18FIAB"]:
            self.dat_update_db("param2", data["18FIAB"][0], "18", "FIAB")
            self.dat_update_db("param3", data["18FIAB"][1], "18", "FIAB")

    def dat_init_field(self):
        """
        Set default value to the field in .DAT panel
        The values can be found in the database.py file -> class createDB.dat_init
        """
        self.txtDAT_OF_PRN.setText(createDB.dat_init[1][1])
        self.txtDAT_OF_RES.setText(createDB.dat_init[1][2])
        self.txtDAT_OF_IPL.setText(createDB.dat_init[1][3])
        self.txtDAT_00_Titre1.setText(createDB.dat_init[2][1])
        self.txtDAT_00_Titre2.setText(createDB.dat_init[2][2])
        self.cbbDAT_01_KOORD_P2.setCurrentIndex(createDB.dat_init[3][2])
        self.txtDAT_01_KOORD_P3.setText(createDB.dat_init[3][3])
        self.txtDAT_01_KOORD_P4.setText(createDB.dat_init[3][4])
        self.txtDAT_01_KOORD_P5.setText(createDB.dat_init[3][5])
        self.txtDAT_01_KOORD_P6.setText(createDB.dat_init[3][6])
        self.txtDAT_01_KOORD_P7.setText(createDB.dat_init[3][7])
        self.txtDAT_01_KOORD_P8.setText(createDB.dat_init[3][8])
        self.cbbDAT_01_RUNDUNG_P2.setCurrentIndex(createDB.dat_init[4][2])
        self.txtDAT_01_RUNDUNG_P3.setText(createDB.dat_init[4][3])
        self.cbbDAT_01_KAT_P2.setCurrentIndex(createDB.dat_init[5][2])
        self.cbbDAT_01_KAT_P3.setCurrentIndex(createDB.dat_init[5][3])
        self.txtDAT_02_LAGEITER_P2.setText(createDB.dat_init[6][2])
        self.txtDAT_03_HOEHEITE_P2.setText(createDB.dat_init[7][2])
        self.txtDAT_04_LAGEABB_P2.setText(createDB.dat_init[8][2])
        self.txtDAT_05_HOEHEABB_P2.setText(createDB.dat_init[9][2])
        self.txtDAT_07_MFRIAZ_P2.setText(createDB.dat_init[10][2])
        self.txtDAT_07_MFRIAZ_P3.setText(createDB.dat_init[10][3])
        self.txtDAT_08_DISTRED_P2.setText(createDB.dat_init[11][2])
        self.txtDAT_08_DISTRED_P3.setText(createDB.dat_init[11][3])
        self.txtDAT_08_DISTRED_P4.setText(createDB.dat_init[11][4])
        self.txtDAT_08_DISTRED_P5.setText(createDB.dat_init[11][5])
        self.txtDAT_08_DISTRED_P6.setText(createDB.dat_init[11][6])
        self.txtDAT_09_MFHDIS_P2.setText(createDB.dat_init[12][2])
        self.txtDAT_09_MFHDIS_P3.setText(createDB.dat_init[12][3])
        self.txtDAT_10_MFHW_P2.setText(createDB.dat_init[13][2])
        self.txtDAT_11_MFIHSH_P2.setText(createDB.dat_init[14][2])
        self.txtDAT_11_MFIHSH_P3.setText(createDB.dat_init[14][3])
        self.txtDAT_12_REFR_P2.setText(createDB.dat_init[15][2])
        self.txtDAT_12_REFR_P3.setText(createDB.dat_init[15][3])
        self.txtDAT_13_P2.setText(createDB.dat_init[16][1])
        self.txtDAT_13_P3.setText(createDB.dat_init[16][2])
        self.cbbDAT_13_P4.setCurrentIndex(createDB.dat_init[16][3])
        self.cbbDAT_14_KOOVERZ_P2.setCurrentIndex(createDB.dat_init[17][2])
        self.cbbDAT_14_KOOVERZ_P3.setCurrentIndex(createDB.dat_init[17][3])
        self.cbbDAT_14_KOOVERZ_P4.setCurrentIndex(createDB.dat_init[17][4])
        self.txtDAT_14_KOOVERZ_P5.setText(createDB.dat_init[17][5])
        self.cbbDAT_14_KOOVERZ_P6.setCurrentIndex(createDB.dat_init[17][6])
        self.cbbDAT_14_KOOVERZ_P7.setCurrentIndex(createDB.dat_init[17][7])
        self.cbbDAT_14_PLOT_P2.setCurrentIndex(createDB.dat_init[18][2])
        self.txtDAT_14_PLOT_P3.setText(createDB.dat_init[18][3])
        self.txtDAT_14_PLOT_P4.setText(createDB.dat_init[18][4])
        self.cbbDAT_14_PLOT_P5.setCurrentIndex(createDB.dat_init[18][5])
        self.txtDAT_14_PLOT_P6.setText(createDB.dat_init[18][6])
        self.txtDAT_14_PLOT_P7.setText(createDB.dat_init[18][7])
        self.txtDAT_14_PLOT_P8.setText(createDB.dat_init[18][8])
        self.cbbDAT_15_MATRIZ_P2.setCurrentIndex(createDB.dat_init[19][2])
        self.cbbDAT_15_MATRIZ_P3.setCurrentIndex(createDB.dat_init[19][3])
        self.cbbDAT_16_PRAEANA_P2.setCurrentIndex(createDB.dat_init[20][2])
        self.cbbDAT_17_PROGVERS_P2.setCurrentIndex(createDB.dat_init[21][2])
        self.cbbDAT_17_PROGVERS_P3.setCurrentIndex(createDB.dat_init[21][3])
        self.cbbDAT_17_PROGVERS_P4.setCurrentIndex(createDB.dat_init[21][4])
        self.txtDAT_17_PROGVERS_P5.setText(createDB.dat_init[21][5])
        self.cbbDAT_17_ELLIPS_P2.setCurrentIndex(createDB.dat_init[22][2])
        self.txtDAT_17_ELLIPS_P3.setText(createDB.dat_init[22][3])
        self.txtDAT_17_ELLIPS_P4.setText(createDB.dat_init[22][4])
        self.txtDAT_17_ELLIPS_P5.setText(createDB.dat_init[22][5])
        self.txtDAT_17_ROBUST_P2.setText(createDB.dat_init[23][2])
        self.txtDAT_17_ROBUST_P3.setText(createDB.dat_init[23][3])
        self.txtDAT_18_IZUVER_P2.setText(createDB.dat_init[24][2])
        self.txtDAT_18_IZUVER_P3.setText(createDB.dat_init[24][3])
        self.txtDAT_18_IZUVER_P4.setText(createDB.dat_init[24][5])
        self.txtDAT_18_IZUVER_P5.setText(createDB.dat_init[24][5])
        self.txtDAT_18_IZUVER_P6.setText(createDB.dat_init[24][6])
        self.cbbDAT_18_FIAB_P2.setCurrentIndex(createDB.dat_init[25][2])
        self.txtDAT_18_FIAB_P3.setText(createDB.dat_init[25][3])
        self.txtDAT_20_P1.setText(createDB.dat_init[26][1])
        self.txtDAT_20_P2.setText(createDB.dat_init[26][2])
        self.txtDAT_20_P3.setText(createDB.dat_init[26][3])
        self.txtDAT_20_P4.setText(createDB.dat_init[26][4])

    def dat_update_db(self, param, val, ka, param_fix):
        """ Update the dat_conf table in the .qltop database """
        db_name = self.cbbListFileDB.currentText()  ## Current database.qltop name
        if db_name:
            if not param_fix:
                manageDatDB.update_ka_param(db_name, param, val, ka)
            else:
                manageDatDB.update_ka_param_fix(db_name, param, val, ka, param_fix)

    def dat_file_update(self):
        """ Update the selected Ltop.dat file with the database content """
        db_name = self.cbbListFileDB.currentText()    ## Current database.qltop name
        dat_file = self.cbbListFileDat.currentText()  ## Current Ltop.dat file name
        exportDatFile(db_name, dat_file)

    def dat_ltop_start(self):
        """ Retrieves the time to print it in the console """
        try:
            QApplication.setOverrideCursor(Qt.WaitCursor)  ## Start the 'wait' cursor
            var_env = self.valVarEnv.text()
            file_dat = self.cbbListFileDat.currentText()
            currentDT = datetime.datetime.now()

            # Add the header to the console
            header = "<p style=\'color:#33ff00;\'>"
            header += "+"*42 + "<br>"
            header += u"D√©but du calcul LTOP : " + currentDT.strftime("%Y-%m-%d %H:%M:%S")
            header += "<br>" + "="*42 + "</p>"
            self.txtConsole.appendHtml(header)

            if not var_env:
                session = launchLtop(file_dat)
            else:
                session = launchLtop(file_dat, var_env)

            # Add the log result to the console
            for log_rows in session.log_ltop:
                data = "<span style=\'white-space:pre;color:#33ff00;\'>"
                data += log_rows
                data += "</span>"
                self.txtConsole.appendHtml(data)

            # Add the footer to the console
            footer = "<p style=\'color:#33ff00;\'>" + "+"*42 + "<br></p>"
            self.txtConsole.appendHtml(footer)

            # Refresh the Ltop.prnx combobox in the 'Result' panel
            self.prnx_file_reload()
        except:
            QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
            print("qltop_dockwidget -> Failed to launch an Ltop calculation (def dat_ltop_start)")
            iface.messageBar().pushMessage("Attention : ",
                                           u"*** Probl√®me avec le lancement de LTOP ***",
                                           level=Qgis.Critical,
                                           duration=3)
        finally:
            QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor

    ################################################################################################
    ######################################### RESULT PART ##########################################
    ################################################################################################

    def load_prnx_file_to_tab(self):
        """ Load an existing Ltop.prnx file to panel """
        self.res_erase_all_table_widget()               ## Empty previous results
        prnx_file = self.cbbListFilePrnx.currentText()  ## Ltop.prnx file name
        try:
            QApplication.setOverrideCursor(Qt.WaitCursor)  ## Start the 'wait' cursor
            if prnx_file:
                load_prnx = loadPrnx(prnx_file)
                # Load to Qgis button
                if load_prnx.resultat["coordinates"] and load_prnx.resultat["external_reliability_apriori"]:
                    self.btnResDisplayPrnx.setStyleSheet(self.stylesSheetTrue)
                else:
                    self.btnResDisplayPrnx.setStyleSheet(self.stylesSheetFalse)
                # Errors
                if load_prnx.resultat["errors"]:
                    self.res_errors_display(load_prnx.resultat["errors"])
                    self.tabResWidget.setTabEnabled(0, True)         ## Enable the error tab
                    self.tabResWidget.setCurrentIndex(0)             ## Jump to the error tab
                    iface.messageBar().pushMessage("Attention : ",
                                                   u"*** Ltop a renvoy√© des erreurs ***",
                                                   level=Qgis.Warning,
                                                   duration=3)
                else:
                    self.tabResWidget.setTabEnabled(0, False)        ## Disable the error tab
                    self.tabResWidget.setCurrentIndex(6)             ## Jump to the statistics tab
                    iface.messageBar().pushMessage("Info : ",
                                                   u"*** Import du fichier {} effectu√© avec succ√®s ***".format(prnx_file),
                                                   level=Qgis.Info,
                                                   duration=3)
                # Header
                if load_prnx.resultat["header"]:
                    self.res_header_display(load_prnx.resultat["header"])
                # Planimetric Abriss
                if load_prnx.resultat["plani_meanError"]:
                    self.res_plani_mean_error_display(load_prnx.resultat["plani_meanError"])
                if load_prnx.resultat["plani_biggestWi"]:
                    self.res_plani_biggestWi_display(load_prnx.resultat["plani_biggestWi"])
                if load_prnx.resultat["plani_listWi"]:
                    self.res_plani_listWi_display(load_prnx.resultat["plani_listWi"])
                if load_prnx.resultat["plani_characteristics"]:
                    self.res_plani_characteristics_display(load_prnx.resultat["plani_characteristics"])
                if load_prnx.resultat["plani_station"]:
                    self.res_plani_station_display(load_prnx.resultat)
                # Altimetric Abriss
                if load_prnx.resultat["alti_meanError"]:
                    self.res_alti_mean_error_display(load_prnx.resultat["alti_meanError"])
                if load_prnx.resultat["alti_divers"]:
                    if load_prnx.resultat["alti_divers"]["refractionCoeff"]:
                        self.res_alti_crefr_display(load_prnx.resultat["alti_divers"]["refractionCoeff"])
                    if load_prnx.resultat["alti_divers"]["factorOneSidedSightings"]:
                        self.res_alti_reciproque_display(load_prnx.resultat["alti_divers"]["factorOneSidedSightings"])
                if load_prnx.resultat["alti_biggestWi"]:
                    self.res_alti_biggestWi_display(load_prnx.resultat["alti_biggestWi"])
                if load_prnx.resultat["alti_listWi"]:
                    self.res_alti_listWi_display(load_prnx.resultat["alti_listWi"])
                if load_prnx.resultat["alti_characteristics"]:
                    self.res_alti_characteristics_display(load_prnx.resultat["alti_characteristics"])
                if load_prnx.resultat["alti_station"]:
                    self.res_alti_station_display(load_prnx.resultat)
                # Coordinates
                if load_prnx.resultat["coordinates"]:
                    self.res_coordinates_display(load_prnx.resultat["coordinates"])
                # External Reliability Apriori
                if load_prnx.resultat["plani_meanError"]:
                    self.res_external_reliability_display(load_prnx.resultat["external_reliability_apriori"])
                # Relative ellipses
                if load_prnx.resultat["rel_ellips"]:
                    self.res_relative_ellipse_display(load_prnx.resultat["rel_ellips"])
                # Relative rectangles
                if load_prnx.resultat["rel_rectang"]:
                    self.res_relative_rectangle_display(load_prnx.resultat["rel_rectang"])
                # Statistic
                self.res_statistic_display(load_prnx.resultat)
                if load_prnx.resultat["page1_err_moy_grp"]:
                    self.res_stat_err_moy_grp_display(load_prnx.resultat["page1_err_moy_grp"])
        except:
            QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
            pass
        finally:
            QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor

    def res_erase_all_table_widget(self):
        """ Empty the Ui layout reference contents """
        layout_list = (self.layResHead_Value, self.layResPlaniMeanError,
                       self.layResExternReliab, self.layResStatAlti1_Value,
                       self.layResStatAlti2_Value, self.layResStatPlani1_Value,
                       self.layResStatPlani2_Value, self.layResStatP2_Value,
                       self.layResStatFiles_Value, self.layResStatOpe_Value,
                       self.layResErrors, self.layResCoordinates,
                       self.layResAltiMeanError, self.layResAltiCRefr,
                       self.layResAltiRecipr, self.layResStatErrGrp,
                       self.layResAltiStation, self.layResPlaniStation,
                       self.layResRelEllips_title, self.layResRelEllips,
                       self.layResRelRectang_title, self.layResRelRectang,
                       self.layResPlaniStatBigWi, self.layResPlaniStatLstWi,
                       self.layResPlaniStatChar, self.layResAltiStatBigWi,
                       self.layResAltiStatLstWi, self.layResAltiStatChar)
        for layout in layout_list:
            for elem in range(layout.count()):
                layout.itemAt(elem).widget().deleteLater()

    def res_errors_display(self, data):
        """ Display the Ltop.prnx errors content in the 'Erreurs' result tab """
        model = tblResErrorsModel(data)
        new_widget = tblResCreateWidget(self.layResErrors, model)

    def res_header_display(self, data):
        """ Display the Ltop.prnx header content in the 'Ent√™te' result tab """
        for key, value in data.items():
            resLabelValue(self.layResHead_Value, value, "Left", "Normal")

    def res_plani_mean_error_display(self, data):
        """ Display the Ltop.prnx planimetricAbriss mean error content in the 'Planim√©trie' result tab """
        model = tblResPlaniStochModel(data)
        new_widget = tblResCreateWidget(self.layResPlaniMeanError, model)

    def res_plani_biggestWi_display(self, data):
        """ Display the Ltop.prnx planimetricAbriss biggestWi content in the 'Planim√©trie' result tab """
        txt_label = u"{} WI > {}, valeur maximum  '{}'  sur observation num√©ro  {}".format(data["count"], data["biggerThan"], data["biggestValue"], data["biggestValueAT"])
        if ("biggestValueDet" and "biggestValueDetAT") in data:
            if data["biggestValueDet"] and data["biggestValueDetAT"]:
                txt_label += "\nvaleur maximale d√©terminable  '{}'  sur observation num√©ro  {}".format(data["biggestValueDet"], data["biggestValueDetAT"])
        resLabelValue(self.layResPlaniStatBigWi, txt_label, "Left", "Normal")

    def res_plani_listWi_display(self, data):
        """ Display the Ltop.prnx planimetricAbriss listWi content in the 'Planim√©trie' result tab """
        model = tblResListWiModel(data)
        new_widget = tblResCreateWidget(self.layResPlaniStatLstWi, model)

    def res_plani_characteristics_display(self, data):
        """ Display the Ltop.prnx planimetricAbriss characteristics content in the 'Planim√©trie' result tab """
        txt_label = "LIMITE DETECT.D'ERREURS:  {}    ERREUR 2E TYPE  {}".format(data["limitDetectableErrors"], data["error2ndKind"])
        resLabelValue(self.layResPlaniStatChar, txt_label, "Left", "Normal")

    def res_plani_station_display(self, data):
        """ Display the Ltop.prnx planimetric station content in the 'Planim√©trie' result tab """
        try:
            # Get the max planimetric wi to add to the models -> diplay red if val > max_wi
            max_wi = data["plani_biggestWi"]
            val_wi = max_wi["biggerThan"] if "biggerThan" in max_wi else "0"
            # Add the data to the planimetric layouts
            for station in data["plani_station"]:
                # Title
                txt_label = "\n-----    "
                list_label = ["obsType", "name", "type", "newPoint", "value", "fbuch", "verdat", "weather", "correction", "meanError"]
                for elem in list_label:
                    if station[0].get(elem):
                        txt_label += station[0].get(elem) + "    "
                txt_label += "-----"
                resLabelValue(self.layResPlaniStation, txt_label, "Left", "Bold")
                # Observations
                type = station[0]["obsType"]
                if type == "distance":
                    model = tblResPlaniStationDistanceModel(station[1], val_wi)
                    new_widget = tblResCreateWidget(self.layResPlaniStation, model)
                else:  ## direction
                    model = tblResPlaniStationDirectionModel(station[1], val_wi)
                    new_widget = tblResCreateWidget(self.layResPlaniStation, model)
        except:
            print("Error to display the planimetric station content")

    def res_alti_mean_error_display(self, data):
        """ Display the Ltop.prnx altimetricAbriss mean error content in the 'Altim√©trie' result tab """
        model = tblResAltiStochModel(data)
        new_widget = tblResCreateWidget(self.layResAltiMeanError, model)

    def res_alti_crefr_display(self, data):
        """ Display the Ltop.prnx refraction coefficient content in the 'Altim√©trie' result tab """
        txt_label = "C REFR = {}".format(data)
        resLabelValue(self.layResAltiCRefr, txt_label, "Left", "Normal")

    def res_alti_reciproque_display(self, data):
        """ Display the Ltop.prnx reciprocal coefficient content in the 'Altim√©trie' result tab """
        txt_label = "POUR VISEES NON RECIPROQUES, LA VALEUR EST MULTIPLIEE PAR {}".format(data)
        resLabelValue(self.layResAltiRecipr, txt_label, "Left", "Normal")

    def res_alti_biggestWi_display(self, data):
        """ Display the Ltop.prnx altimetricAbriss biggestWi content in the 'Altim√©trie' result tab """
        txt_label = u"{} WI > {}, valeur maximum  '{}'  sur observation num√©ro  {}".format(data["count"], data["biggerThan"], data["biggestValue"], data["biggestValueAT"])
        if ("biggestValueDet" and "biggestValueDetAT") in data:
            if data["biggestValueDet"] and data["biggestValueDetAT"]:
                txt_label += "\nvaleur maximale d√©terminable  '{}'  sur observation num√©ro  {}".format(data["biggestValueDet"], data["biggestValueDetAT"])
        resLabelValue(self.layResAltiStatBigWi, txt_label, "Left", "Normal")

    def res_alti_listWi_display(self, data):
        """ Display the Ltop.prnx altimetricAbriss listWi content in the 'Altim√©trie' result tab """
        model = tblResListWiModel(data)
        new_widget = tblResCreateWidget(self.layResAltiStatLstWi, model)

    def res_alti_characteristics_display(self, data):
        """ Display the Ltop.prnx altimetricAbriss characteristics content in the 'Altim√©trie' result tab """
        txt_label = "LIMITE DETECT.D'ERREURS:  {}    ERREUR 2E TYPE  {}".format(data["limitDetectableErrors"], data["error2ndKind"])
        resLabelValue(self.layResAltiStatChar, txt_label, "Left", "Normal")

    def res_alti_station_display(self, data):
        """ Display the Ltop.prnx altimetric station content in the 'Altim√©trie' result tab """
        try:
            # Get the max altimetric wi to add to the model -> diplay red if val > max_wi
            max_wi = data["plani_biggestWi"]
            val_wi = max_wi["biggerThan"] if "biggerThan" in max_wi else "0"
            # Add the data to the altimetric layouts
            for station in data["alti_station"]:
                # Title
                txt_label = "\n-----    "
                list_label = ["obsType", "name", "type", "newPoint", "value"]
                for elem in list_label:
                    if station[0].get(elem):
                        txt_label += station[0].get(elem) + "    "
                txt_label += "-----"
                resLabelValue(self.layResAltiStation, txt_label, "Left", "Bold")
                # Observations
                model = tblResAltiStationModel(station[1], val_wi)
                new_widget = tblResCreateWidget(self.layResAltiStation, model)
        except:
            print("Error to display the altimetric tables content")

    def res_coordinates_display(self, data):
        """ Display the Ltop.prnx coordinates content in the 'Coordonn√©es' result tab """
        model = tblResCoordinatesModel(data)
        new_widget = tblResCreateWidget(self.layResCoordinates, model)

    def res_external_reliability_display(self, data):
        """ Display the Ltop.prnx externalReliabilityApriori content in the 'Fiabilit√© externe' result tab """
        model = tblResExternalReliabilityModel(data)
        new_widget = tblResCreateWidget(self.layResExternReliab, model)

    def res_relative_ellipse_display(self, data):
        """ Display the Ltop.prnx relative ellipses content in the 'Fiabilit√© externe' result tab """
        txt_label = "ELLIPSES D'ERREUR RELATIVES"
        resLabelValue(self.layResRelEllips_title, txt_label, "Left", "Bold")
        model = tblResRelEllipsModel(data)
        new_widget = tblResCreateWidget(self.layResRelEllips, model)

    def res_relative_rectangle_display(self, data):
        """ Display the Ltop.prnx relative rectangle content in the 'Fiabilit√© externe' result tab """
        txt_label = "RECTANGLES DE FIABILITE RELATIFS"
        resLabelValue(self.layResRelRectang_title, txt_label, "Left", "Bold")
        model = tblResRelRectangModel(data)
        new_widget = tblResCreateWidget(self.layResRelRectang, model)

    def res_statistic_display(self, data):
        """ Display the Ltop.prnx statistic (page1) content in the 'Statistiques' result tab """
        try:
            resLabelValue(self.layResStatPlani1_Value, data["part1_plani1"]
                                                           ["meanErrorQuotientWithoutRounding"],
                          "Center", "Normal")
            resLabelValue(self.layResStatAlti1_Value, data["part1_altim1"]
                                                          ["meanErrorQuotientWithoutRounding"],
                          "Center", "Normal")
            for key, value in data["part1_plani2"].items():
                resLabelValue(self.layResStatPlani2_Value, value, "Center", "Normal")
            for key, value in data["part1_altim2"].items():
                resLabelValue(self.layResStatAlti2_Value, value, "Center", "Normal")
            for key, value in data["part2"].items():
                resLabelValue(self.layResStatP2_Value, value, "Center", "Normal")
            for key, value in data["files"].items():
                resLabelValue(self.layResStatFiles_Value, value, "Left", "Normal")
            resLabelValue(self.layResStatOpe_Value, data["user"], "Left", "Normal")
        except:
            print("qltop_dockwidget -> Failed to display the statstic in the result page (def res_statistic_display)")

    def res_stat_err_moy_grp_display(self, data):
        """ Display the Ltop.prnx the mean group error content in the 'Statistiques' result tab """
        model = tblResStatErrMoyGrpModel(data)
        new_widget = tblResCreateWidget(self.layResStatErrGrp, model)

    def load_prnx_file_to_qgis(self):
        """ Load an existing Ltop.prnx file to the Qgis canevas """
        prnx_file = self.cbbListFilePrnx.currentText()  ## Ltop.prnx file name
        epsg = self.selSysProj.crs().authid()           ## Current project epsg/srs/crs
        scale = self.txtResDisplayScale.text()          ## Factor scale to apply to the geometry
        if prnx_file:
            get_prnx = getPrnxDataQgis(prnx_file)
            if get_prnx.modif_list:
                ellips = displayEllipseError(get_prnx.modif_list, epsg, scale)
                rectangle = displayFiabilityRectangle(get_prnx.modif_list, epsg, scale)

    ################################################################################################
    ######################################### .TOOLS PART ##########################################
    ################################################################################################

    def tool_on_raster_changed(self):
        """ Set the visibility calculation button color if the raster layer is changed """
        raster_layer = self.cbbToolSelRaster.currentLayer()  ## Selected raster layer
        if raster_layer:
            self.btnToolCalcVisibility.setStyleSheet(self.stylesSheetTrue)
        else:
            self.btnToolCalcVisibility.setStyleSheet(self.stylesSheetFalse)
            self.cbbToolSelBand.setBand(-1)  ## Empty the combobox value

    def tool_launch_calc_visibility(self):
        """ Launch a visibility calculation """
        db_name = self.cbbListFileDB.currentText()           ## Current database.qltop name
        epsg = self.selSysProj.crs().authid()                ## Current project epsg/srs/crs
        raster_layer = self.cbbToolSelRaster.currentLayer()  ## Selected raster layer
        band_number = self.cbbToolSelBand.currentBand()      ## Selected altitude band
        secur_dist = self.txtToolSetSecur.text()             ## Security distance to add
        discr_dist = self.txtToolSetDiscr.text()             ## Segment size to calculate
        try:
            QApplication.setOverrideCursor(Qt.WaitCursor)  ## Start the 'wait' cursor
            if raster_layer:
                res = visibilityAnalysis(db_name, epsg, raster_layer, band_number, secur_dist, discr_dist)
        except:
            QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
            print("Visibility calculation failed")
        finally:
            QApplication.restoreOverrideCursor()  ## Stop the 'wait' cursor
